Ass_dev M:4 DEF libhdr.h[651] Ass_dev=4
Ass_dir M:2 DEF libhdr.h[649] Ass_dir=2
Ass_link M:0 DEF libhdr.h[647] Ass_link=0
Ass_name M:5 DEF libhdr.h[652] Ass_name=5
Ass_task M:1 DEF libhdr.h[648] Ass_task=1
Ass_type M:3 DEF libhdr.h[650] Ass_type=3
B2Wsh M:2 DEF libhdr.h[18] B2Wsh=1+32/32
B2Wsh M:2 MAN libhdr.h[219] bytesperword=1<<B2Wsh
Blank M:0 DEF astar.b[33] Blank=0
Blank M:0 MAN astar.b[233] IF s_state!cell=Blank|s_state!cell=Open DO ..
Blank M:0 MAN astar.b[244] CASE Blank:.. 
Blank M:0 MAN astar.b[281] s_state!cell:=Blank
Blank M:0 MAN astar.b[398] CASE Blank:.. 
CloseObj M:1 DEF libhdr.h[268] CloseObj=1
Closed M:2 DEF astar.b[35] Closed=
Closed M:2 MAN astar.b[242] CASE Closed:.. 
Closed M:2 MAN astar.b[399] CASE Closed:.. 
Dcb_arg M:4 DEF libhdr.h[592] Dcb_arg=4
Dcb_cvp M:6 DEF libhdr.h[594] Dcb_cvp=6
Dcb_devid M:1 DEF libhdr.h[589] Dcb_devid=1
Dcb_flag M:9 DEF libhdr.h[600] Dcb_flag=9
Dcb_intson M:7 DEF libhdr.h[598] Dcb_intson=7
Dcb_irq M:8 DEF libhdr.h[599] Dcb_irq=8
Dcb_op M:3 DEF libhdr.h[591] Dcb_op=3
Dcb_threadp M:5 DEF libhdr.h[593] Dcb_threadp=5
Dcb_type M:0 DEF libhdr.h[588] Dcb_type=0
Dcb_upb M:15 DEF libhdr.h[609] Dcb_upb=
Dcb_var0 M:10 DEF libhdr.h[604] Dcb_var0=10
Dcb_var1 M:11 DEF libhdr.h[605] Dcb_var1=11
Dcb_var2 M:12 DEF libhdr.h[606] Dcb_var2=12
Dcb_var3 M:13 DEF libhdr.h[607] Dcb_var3=13
Dcb_var4 M:14 DEF libhdr.h[608] Dcb_var4=14
Dcb_wkq M:2 DEF libhdr.h[590] Dcb_wkq=2
Devc_create M:1 DEF libhdr.h[619] Devc_create=1
Devc_destroy M:2 DEF libhdr.h[620] Devc_destroy=2
Devc_setintson M:5 DEF libhdr.h[623] Devc_setintson=5
Devc_start M:3 DEF libhdr.h[621] Devc_start=3
Devc_stop M:4 DEF libhdr.h[622] Devc_stop=4
Devt_clk M:1 DEF libhdr.h[612] Devt_clk=1
Devt_fileop M:4 DEF libhdr.h[615] Devt_fileop=4
Devt_tcpdev M:5 DEF libhdr.h[616] Devt_tcpdev=5
Devt_ttyin M:2 DEF libhdr.h[613] Devt_ttyin=2
Devt_ttyout M:3 DEF libhdr.h[614] Devt_ttyout=3
GB2312 M:-2 DEF libhdr.h[521] GB2312=-2
InitObj M:0 DEF libhdr.h[267] InitObj=0
Open M:1 DEF astar.b[34] Open=
Open M:1 MAN astar.b[233] IF s_state!cell=Blank|s_state!cell=Open DO ..
Open M:1 MAN astar.b[245] s_state!cell:=Open
Open M:1 MAN astar.b[251] CASE Open:.. 
Open M:1 MAN astar.b[254] IF s_state=Open&tg>=s_g!cell DO ..
Open M:1 MAN astar.b[400] CASE Open:.. 
State_dead M:12 DEF libhdr.h[638] State_dead=12
State_hold M:2 DEF libhdr.h[635] State_hold=2
State_int M:8 DEF libhdr.h[637] State_int=8
State_pkt M:1 DEF libhdr.h[634] State_pkt=1
State_wait M:4 DEF libhdr.h[636] State_wait=4
Sys_buttons M:56 DEF libhdr.h[413] Sys_buttons=56
Sys_callc M:59 DEF libhdr.h[416] Sys_callc=59
Sys_callnative M:53 DEF libhdr.h[410] Sys_callnative=53
Sys_close M:16 DEF libhdr.h[376] Sys_close=16
Sys_cputime M:30 DEF libhdr.h[389] Sys_cputime=30
Sys_datstamp M:44 DEF libhdr.h[401] Sys_datstamp=44
Sys_delay M:57 DEF libhdr.h[414] Sys_delay=57
Sys_deletefile M:17 DEF libhdr.h[377] Sys_deletefile=17
Sys_devcom M:43 DEF libhdr.h[400] Sys_devcom=43
Sys_dumpmem M:52 DEF libhdr.h[409] Sys_dumpmem=52
Sys_ext M:68 DEF libhdr.h[427] Sys_ext=68
Sys_filemodtime M:31 DEF libhdr.h[390] Sys_filemodtime=31
Sys_filesize M:46 DEF libhdr.h[403] Sys_filesize=46
Sys_flt M:63 DEF libhdr.h[421] Sys_flt=63
Sys_freevec M:22 DEF libhdr.h[382] Sys_freevec=22
Sys_getpid M:51 DEF libhdr.h[408] Sys_getpid=51
Sys_getprefix M:33 DEF libhdr.h[392] Sys_getprefix=33
Sys_getsysval M:48 DEF libhdr.h[405] Sys_getsysval=48
Sys_gettrval M:62 DEF libhdr.h[420] Sys_gettrval=62
Sys_getvec M:21 DEF libhdr.h[381] Sys_getvec=21
Sys_gl M:67 DEF libhdr.h[426] Sys_gl=67
Sys_globin M:24 DEF libhdr.h[384] Sys_globin=24
Sys_graphics M:34 DEF libhdr.h[393] Sys_graphics=34
Sys_inc M:55 DEF libhdr.h[412] Sys_inc=55
Sys_incdcount M:65 DEF libhdr.h[423] Sys_incdcount=65
Sys_interpret M:7 DEF libhdr.h[368] Sys_interpret=7
Sys_intflag M:28 DEF libhdr.h[387] Sys_intflag=28
Sys_loadseg M:23 DEF libhdr.h[383] Sys_loadseg=23
Sys_lockirq M:41 DEF libhdr.h[398] Sys_lockirq=41
Sys_muldiv M:26 DEF libhdr.h[386] Sys_muldiv=26
Sys_openappend M:19 DEF libhdr.h[379] Sys_openappend=19
Sys_openread M:14 DEF libhdr.h[374] Sys_openread=14
Sys_openreadwrite M:47 DEF libhdr.h[404] Sys_openreadwrite=47
Sys_openwrite M:15 DEF libhdr.h[375] Sys_openwrite=15
Sys_platform M:54 DEF libhdr.h[411] Sys_platform=54
Sys_pollsardch M:64 DEF libhdr.h[422] Sys_pollsardch=64
Sys_putsysval M:49 DEF libhdr.h[406] Sys_putsysval=49
Sys_quit M:0 DEF libhdr.h[361] Sys_quit=0
Sys_read M:12 DEF libhdr.h[372] Sys_read=12
Sys_renamefile M:18 DEF libhdr.h[378] Sys_renamefile=18
Sys_rti M:1 DEF libhdr.h[362] Sys_rti=1
Sys_sardch M:10 DEF libhdr.h[370] Sys_sardch=10
Sys_saveregs M:2 DEF libhdr.h[363] Sys_saveregs=2
Sys_sawrch M:11 DEF libhdr.h[371] Sys_sawrch=11
Sys_sdl M:66 DEF libhdr.h[425] Sys_sdl=66
Sys_sdl M:66 MAN sdl.b[134] sys(Sys_sdl,sdl_fillrect,currsurf,...)
Sys_sdl M:66 MAN sdl.b[149] sys(Sys_sdl,sdl_fillrect,currsurf,...)
Sys_sdl M:66 MAN sdl.b[165] RESULTIS sys(Sys_sdl,sdl_pollevent,@eventtype)
Sys_sdl M:66 MAN sdl.b[169] sys(Sys_sdl,sdl_delay,msecs)
Sys_sdl M:66 MAN sdl.b[172] sys(Sys_sdl,sdl_getticks)
Sys_sdl M:66 MAN sdl.b[176] sys(Sys_sdl,sdl_hidecursor)
Sys_sdl M:66 MAN sdl.b[178] sys(Sys_sdl,sdl_showcursor)
Sys_sdl M:66 MAN sdl.b[181] sys(Sys_sdl,sdl_flip,screen)
Sys_sdl M:66 MAN sdl.b[185] RESULTIS sys(Sys_sdl,sdl_mksurface,format,...)
Sys_sdl M:66 MAN sdl.b[188] sys(Sys_sdl,sdl_freesurface,surf)
Sys_sdl M:66 MAN sdl.b[194] sys(Sys_sdl,sdl_blitsurface,src,...)
Sys_sdl M:66 MAN sdl.b[201] sys(Sys_sdl,sdl_blitsurface,src,...)
Sys_sdl M:66 MAN sdl.b[205] sys(Sys_sdl,sdl_fillsurf,currsurf,col)
Sys_sdl M:66 MAN sdl.b[37] IF sys(Sys_sdl,sdl_init,sdl_init_everything) DO ..
Sys_sdl M:66 MAN sdl.b[38] sys(Sys_sdl,sdl_geterror,mes)
Sys_sdl M:66 MAN sdl.b[44] joystick:=sys(Sys_sdl,sdl_joystickopen,0)
Sys_sdl M:66 MAN sdl.b[63] screen:=sys(Sys_sdl,sdl_setvideomode,screenxsize,...)
Sys_sdl M:66 MAN sdl.b[66] sys(Sys_sdl,sdl_geterror,mes)
Sys_sdl M:66 MAN sdl.b[697] sys(Sys_sdl,sdl_fillrect,currsurf,...)
Sys_sdl M:66 MAN sdl.b[74] sys(Sys_sdl,sdl_getsurfaceinfo,screen,...)
Sys_sdl M:66 MAN sdl.b[83] sys(Sys_sdl,sdl_maprgb,format,...)
Sys_sdl M:66 MAN sdl.b[85] sys(Sys_sdl,sdl_wm_setcaption,title,0)
Sys_sdl M:66 MAN sdl.b[875] sys(Sys_sdl,sdl_drawfillcircle,currsurf,...)
Sys_sdl M:66 MAN sdl.b[93] sys(Sys_sdl,sdl_quit)
Sys_sdl M:66 MAN sdl.b[98] sys(Sys_sdl,sdl_setcolourkey,surf,col)
Sys_seek M:38 DEF libhdr.h[395] Sys_seek=38
Sys_setcount M:-1 DEF libhdr.h[360] Sys_setcount=-1
Sys_setprefix M:32 DEF libhdr.h[391] Sys_setprefix=32
Sys_setraster M:29 DEF libhdr.h[388] Sys_setraster=29
Sys_setst M:3 DEF libhdr.h[364] Sys_setst=3
Sys_settrcount M:61 DEF libhdr.h[419] Sys_settrcount=61
Sys_shellcom M:50 DEF libhdr.h[407] Sys_shellcom=50
Sys_sound M:58 DEF libhdr.h[415] Sys_sound=58
Sys_tally M:6 DEF libhdr.h[367] Sys_tally=6
Sys_tell M:39 DEF libhdr.h[396] Sys_tell=39
Sys_tracing M:4 DEF libhdr.h[365] Sys_tracing=4
Sys_trpush M:60 DEF libhdr.h[418] Sys_trpush=60
Sys_unloadseg M:25 DEF libhdr.h[385] Sys_unloadseg=25
Sys_unlockirq M:42 DEF libhdr.h[399] Sys_unlockirq=42
Sys_waitirq M:40 DEF libhdr.h[397] Sys_waitirq=40
Sys_watch M:5 DEF libhdr.h[366] Sys_watch=5
Sys_write M:13 DEF libhdr.h[373] Sys_write=13
Task_cli M:1 DEF libhdr.h[626] Task_cli=1
Task_consolehandler M:3 DEF libhdr.h[628] Task_consolehandler=3
Task_debug M:2 DEF libhdr.h[627] Task_debug=2
Task_filehandler M:4 DEF libhdr.h[629] Task_filehandler=4
Task_mbxhandler M:5 DEF libhdr.h[630] Task_mbxhandler=5
Task_tcphandler M:6 DEF libhdr.h[631] Task_tcphandler=6
UTF8 M:-1 DEF libhdr.h[520] UTF8=-1
Wall M:3 DEF astar.b[36] Wall=
Wall M:3 MAN astar.b[241] CASE Wall:.. 
Wall M:3 MAN astar.b[350] s_state!cell:=Wall
Wall M:3 MAN astar.b[359] s_state!cell:=Wall
Wall M:3 MAN astar.b[401] CASE Wall:.. 
abort G:28 DEF libhdr.h[54] abort=28
abort G:28 LG astar.b[238] abort(999)
abort G:28 LG astar.b[272] abort(999)
abort G:28 LG astar.b[349] abort(999)
abort G:28 LG astar.b[358] abort(999)
abort G:28 LG astar.b[449] abort(999)
abort G:28 LG sdl.b[497] abort(999)
abort G:28 LG sdl.b[931] abort(999)
alloc2dvecs F:37 LF sdl.b[505] alloc2dvecs()
alloc2dvecs F:37 LF sdl.b[545] alloc2dvecs()
alloc2dvecs F:37 RT sdl.b[490] LET alloc2dvecs()BE..
alloc3dvecs F:41 LF sdl.b[634] alloc3dvecs()
alloc3dvecs F:41 LF sdl.b[655] alloc3dvecs()
alloc3dvecs F:41 RT sdl.b[609] LET alloc3dvecs()BE..
allocarea G:227 DEF astar.b[85] allocarea=
allocarea G:227 LG astar.b[190] allocarea()
allocarea G:227 RT astar.b[294] LET allocarea()BE..
appendstream G:66 DEF libhdr.h[92] appendstream=66
areav G:214 DEF astar.b[65] areav=
areav G:214 LG astar.b[192] goalcell:=areav!position(100,95)
areav G:214 LG astar.b[194] startcell:=areav!position(20,65)
areav G:214 LG astar.b[231] areav!npos
areav G:214 LG astar.b[304] areav!pos:=cell
areav G:214 LG astar.b[346] areav!position(x,y)
areav G:214 LG astar.b[355] areav!position(x,y)
areav G:214 LG astar.b[367] areav!position(x,y)
areav G:214 SG astar.b[298] areav:=newvec(position(xsize-1,ysize-1))
astar_heuristic G:208 DEF astar.b[58] astar_heuristic=
astar_heuristic G:208 FN astar.b[475] LET astar_heuristic(dx,dy)=..
astar_heuristic G:208 LG astar.b[162] heuristic:=astar_heuristic
big G:205 DEF astar.b[55] big=
big G:205 LG astar.b[141] writef("delay'stra=%n*n",delaytime,randseed,...)
big G:205 LG astar.b[297] IF big DO ..
big G:205 LG astar.b[341] TEST big|TRUE THEN .. ELSE ..
big G:205 LG astar.b[343] IF big DO ..
big G:205 LG astar.b[383] TEST big THEN .. ELSE ..
big G:205 SG astar.b[137] big:=argv!2
binrdch G:39 DEF libhdr.h[65] binrdch=39
binwrch G:42 DEF libhdr.h[68] binwrch=42
bitsperbyte M:8 DEF libhdr.h[220] bitsperbyte=8
bitsperbyte M:8 MAN libhdr.h[221] bitsperword=bitsperbyte*bytesperword
bitsperword M:32 DEF libhdr.h[221] bitsperword=bitsperbyte*bytesperword
bitsperword M:32 MAN libhdr.h[223] minint=1<<bitsperword-1
blitsurf G:517 DEF sdl.h[127] blitsurf=
blitsurf G:517 RT sdl.b[190] LET blitsurf(src,dst,x,y)BE..
blitsurfrect G:518 DEF sdl.h[128] blitsurfrect=
blitsurfrect G:518 RT sdl.b[197] LET blitsurfrect(src,srcrect,dst,x,y)BE..
bootregs M:11 DEF libhdr.h[429] bootregs=11
bytesperword M:4 DEF libhdr.h[219] bytesperword=1<<B2Wsh
bytesperword M:4 MAN libhdr.h[221] bitsperword=bitsperbyte*bytesperword
bytesperword M:4 MAN libhdr.h[222] mcaddrinc=bytesperword
bytesperword M:4 MAN libhdr.h[477] scb_nameeend=scb_name+scb_maxnamelen/bytesperword
bytesperword M:4 MAN libhdr.h[585] tcb_upb=tcb_namebase+15/bytesperword+1
bytesperword M:4 MAN sdl.b[35] LET mes=VEC 256/bytesperword
bytesperword M:4 MAN sdl.b[363] LET s=VEC 256/bytesperword
bytesperword M:4 MAN sdl.b[58] LET mes=VEC 256/bytesperword
callco G:19 DEF libhdr.h[45] callco=19
callseg G:107 DEF libhdr.h[134] callseg=107
capitalch G:96 DEF libhdr.h[123] capitalch=96
changeco G:6 DEF libhdr.h[32] changeco=6
changepri G:155 DEF libhdr.h[189] changepri=155
cis G:12 DEF libhdr.h[38] cis=12
clear_words G:115 DEF libhdr.h[142] clear_words=115
cli_commanddir G:136 DEF libhdr.h[166] cli_commanddir=136
cli_commandfile G:143 DEF libhdr.h[173] cli_commandfile=143
cli_commandname G:138 DEF libhdr.h[168] cli_commandname=138
cli_currentinput G:142 DEF libhdr.h[172] cli_currentinput=142
cli_currentoutput G:146 DEF libhdr.h[177] cli_currentoutput=146
cli_data G:135 DEF libhdr.h[165] cli_data=135
cli_defaultstack G:147 DEF libhdr.h[178] cli_defaultstack=147
cli_faillevel G:139 DEF libhdr.h[169] cli_faillevel=139
cli_init G:133 DEF libhdr.h[163] cli_init=133
cli_initialfaillevel M:10 DEF libhdr.h[529] cli_initialfaillevel=return_hard
cli_initialstack M:50000 DEF libhdr.h[528] cli_initialstack=50000
cli_module G:149 DEF libhdr.h[180] cli_module=149
cli_module_gn M:149 DEF libhdr.h[527] cli_module_gn=149
cli_preloadlist G:145 DEF libhdr.h[176] cli_preloadlist=145
cli_prompt G:140 DEF libhdr.h[170] cli_prompt=140
cli_result2 G:134 DEF libhdr.h[164] cli_result2=134
cli_returncode G:137 DEF libhdr.h[167] cli_returncode=137
cli_standardinput G:141 DEF libhdr.h[171] cli_standardinput=141
cli_standardoutput G:148 DEF libhdr.h[179] cli_standardoutput=148
cli_status G:144 DEF libhdr.h[175] cli_status=144
cli_tallyflag G:132 DEF libhdr.h[162] cli_tallyflag=132
clibit_comcom M:4 DEF libhdr.h[534] clibit_comcom=4
clibit_endcli M:256 DEF libhdr.h[540] clibit_endcli=256
clibit_eofdel M:2 DEF libhdr.h[533] clibit_eofdel=2
clibit_maincli M:8 DEF libhdr.h[535] clibit_maincli=8
clibit_mbxcli M:64 DEF libhdr.h[538] clibit_mbxcli=64
clibit_newcli M:16 DEF libhdr.h[536] clibit_newcli=16
clibit_noprompt M:1 DEF libhdr.h[532] clibit_noprompt=1
clibit_runcli M:32 DEF libhdr.h[537] clibit_runcli=32
clibit_tcpcli M:128 DEF libhdr.h[539] clibit_tcpcli=128
clihook G:4 DEF libhdr.h[30] clihook=4
cliregs M:21 DEF libhdr.h[430] cliregs=21
closesdl G:453 DEF sdl.h[44] closesdl=
closesdl G:453 LG astar.b[207] closesdl()
closesdl G:453 RT sdl.b[87] LET closesdl()BE..
co_c M:5 DEF libhdr.h[265] co_c=
co_fn M:3 DEF libhdr.h[263] co_fn=
co_list M:2 DEF libhdr.h[262] co_list=
co_parent M:1 DEF libhdr.h[261] co_parent=
co_pptr M:0 DEF libhdr.h[260] co_pptr=0
co_size M:4 DEF libhdr.h[264] co_size=
codewrch G:126 DEF libhdr.h[153] codewrch=126
col_black G:237 DEF astar.b[97] col_black=
col_black G:237 LG astar.b[401] RESULTIS col_black
col_black G:237 SG astar.b[165] col_black:=maprgb(0,0,0)
col_blue G:238 DEF astar.b[98] col_blue=
col_blue G:238 LG astar.b[399] RESULTIS col_blue
col_blue G:238 SG astar.b[166] col_blue:=maprgb(0,0,255)
col_cyan G:243 DEF astar.b[103] col_cyan=
col_cyan G:243 SG astar.b[171] col_cyan:=maprgb(255,255,0)
col_darkblue G:246 DEF astar.b[106] col_darkblue=
col_darkblue G:246 SG astar.b[174] col_darkblue:=maprgb(0,0,64)
col_darkcyan G:251 DEF astar.b[111] col_darkcyan=
col_darkcyan G:251 SG astar.b[179] col_darkcyan:=maprgb(64,64,0)
col_darkgray G:245 DEF astar.b[105] col_darkgray=
col_darkgray G:245 SG astar.b[173] col_darkgray:=maprgb(64,64,64)
col_darkgreen G:247 DEF astar.b[107] col_darkgreen=
col_darkgreen G:247 SG astar.b[175] col_darkgreen:=maprgb(0,64,0)
col_darkmajenta G:250 DEF astar.b[110] col_darkmajenta=
col_darkmajenta G:250 SG astar.b[178] col_darkmajenta:=maprgb(64,0,64)
col_darkred G:249 DEF astar.b[109] col_darkred=
col_darkred G:249 LG astar.b[397] RESULTIS col_darkred
col_darkred G:249 SG astar.b[177] col_darkred:=maprgb(128,0,0)
col_darkyellow G:248 DEF astar.b[108] col_darkyellow=
col_darkyellow G:248 SG astar.b[176] col_darkyellow:=maprgb(0,64,64)
col_gray G:252 DEF astar.b[112] col_gray=
col_gray G:252 LG astar.b[188] fillsurf(col_gray)
col_gray G:252 LG astar.b[398] RESULTIS col_gray
col_gray G:252 SG astar.b[180] col_gray:=maprgb(128,128,128)
col_green G:239 DEF astar.b[99] col_green=
col_green G:239 LG astar.b[374] col:=col_green
col_green G:239 SG astar.b[167] col_green:=maprgb(0,255,0)
col_lightblue G:254 DEF astar.b[114] col_lightblue=
col_lightblue G:254 SG astar.b[181] col_lightblue:=maprgb(128,128,255)
col_lightcyan G:259 DEF astar.b[119] col_lightcyan=
col_lightcyan G:259 SG astar.b[186] col_lightcyan:=maprgb(255,255,128)
col_lightgray G:253 DEF astar.b[113] col_lightgray=
col_lightgreen G:255 DEF astar.b[115] col_lightgreen=
col_lightgreen G:255 SG astar.b[182] col_lightgreen:=maprgb(128,255,128)
col_lightmajenta G:258 DEF astar.b[118] col_lightmajenta=
col_lightmajenta G:258 SG astar.b[185] col_lightmajenta:=maprgb(255,128,255)
col_lightred G:257 DEF astar.b[117] col_lightred=
col_lightred G:257 SG astar.b[184] col_lightred:=maprgb(255,128,128)
col_lightyellow G:256 DEF astar.b[116] col_lightyellow=
col_lightyellow G:256 SG astar.b[183] col_lightyellow:=maprgb(128,255,255)
col_majenta G:242 DEF astar.b[102] col_majenta=
col_majenta G:242 SG astar.b[170] col_majenta:=maprgb(255,0,255)
col_red G:241 DEF astar.b[101] col_red=
col_red G:241 LG astar.b[375] col:=col_red
col_red G:241 SG astar.b[169] col_red:=maprgb(255,0,0)
col_white G:244 DEF astar.b[104] col_white=
col_white G:244 LG astar.b[400] RESULTIS col_white
col_white G:244 SG astar.b[172] col_white:=maprgb(255,255,255)
col_yellow G:240 DEF astar.b[100] col_yellow=
col_yellow G:240 SG astar.b[168] col_yellow:=maprgb(0,255,255)
colist G:8 DEF libhdr.h[34] colist=8
colour G:229 DEF astar.b[87] colour=
colour G:229 FN astar.b[396] LET colour(cell)=..
colour G:229 LG astar.b[373] colour(cell)
colour G:466 DEF sdl.h[63] colour=
colour G:466 LG sdl.b[134] sys(Sys_sdl,sdl_fillrect,currsurf,...)
colour G:466 LG sdl.b[149] sys(Sys_sdl,sdl_fillrect,currsurf,...)
colour G:466 LG sdl.b[323] colour
colour G:466 LG sdl.b[697] sys(Sys_sdl,sdl_fillrect,currsurf,...)
colour G:466 LG sdl.b[875] sys(Sys_sdl,sdl_drawfillcircle,currsurf,...)
colour G:466 SG sdl.b[96] colour,prevdrawn:=col,FALSE
compch G:97 DEF libhdr.h[124] compch=97
compstring G:98 DEF libhdr.h[125] compstring=98
consoletask G:171 DEF libhdr.h[202] consoletask=171
copy_bytes G:116 DEF libhdr.h[143] copy_bytes=116
copy_words G:114 DEF libhdr.h[141] copy_words=114
copydir G:79 DEF libhdr.h[105] copydir=79
copyobj G:75 DEF libhdr.h[101] copyobj=75
copystring G:99 DEF libhdr.h[126] copystring=99
cos G:13 DEF libhdr.h[39] cos=13
cowait G:20 DEF libhdr.h[46] cowait=20
createco G:17 DEF libhdr.h[43] createco=17
createdev G:172 DEF libhdr.h[203] createdev=172
createdir G:82 DEF libhdr.h[108] createdir=82
createtask G:153 DEF libhdr.h[187] createtask=153
currco G:7 DEF libhdr.h[33] currco=7
current_language G:190 DEF libhdr.h[211] current_language=190
currentdir G:14 DEF libhdr.h[40] currentdir=14
currsurf G:486 DEF sdl.h[89] currsurf=
currsurf G:486 LG sdl.b[134] sys(Sys_sdl,sdl_fillrect,currsurf,...)
currsurf G:486 LG sdl.b[149] sys(Sys_sdl,sdl_fillrect,currsurf,...)
currsurf G:486 LG sdl.b[205] sys(Sys_sdl,sdl_fillsurf,currsurf,col)
currsurf G:486 LG sdl.b[697] sys(Sys_sdl,sdl_fillrect,currsurf,...)
currsurf G:486 LG sdl.b[875] sys(Sys_sdl,sdl_drawfillcircle,currsurf,...)
currsurf G:486 SG sdl.b[101] currsurf,currxsize,currysize:=surf,xsize,ysize
currx G:470 DEF sdl.h[69] currx=
currx G:470 LG sdl.b[111] IF ...&...|...&...|x>=currxsize&currx>=currxsize|y>=currysize&curry>=currysize DO ..
currx G:470 LG sdl.b[119] drawpoint(currx,curry)
currx G:470 LG sdl.b[121] mx:=(x+currx)/2
currx G:470 LG sdl.b[123] TEST (mx=currx|mx=x)&(my=curry|my=y) THEN .. ELSE ..
currx G:470 LG sdl.b[156] moveto(currx+dx,curry+dy)
currx G:470 LG sdl.b[157] drawto(currx+dx,curry+dy)
currx G:470 LG sdl.b[159] moveto3d(currx+dx,curry+dy,currz+dz)
currx G:470 LG sdl.b[160] drawto3d(currx+dx,curry+dy,currz+dz)
currx G:470 LG sdl.b[211] write_ch_slice(currx,...-line,ch,line)
currx G:470 LG sdl.b[212] currx:=currx+9
currx G:470 LG sdl.b[218] currx,curry
currx G:470 LG sdl.b[380] Op13
currx G:470 LG sdl.b[382] currx<x->1,-1
currx G:470 LG sdl.b[387] drawpoint(currx,curry)
currx G:470 LG sdl.b[388] IF currx=x&curry=y DO ..
currx G:470 LG sdl.b[392] currx:=currx+sx
currx G:470 LG sdl.b[403] Op13
currx G:470 LG sdl.b[405] currx<x->1,-1
currx G:470 LG sdl.b[408] currx,curry,currz
currx G:470 LG sdl.b[422] drawpoint3d(currx,curry,currz)
currx G:470 LG sdl.b[424] IF currx=x&curry=y DO ..
currx G:470 LG sdl.b[428] currx:=currx+sx
currx G:470 LG sdl.b[435] currz:=z0+muldiv(z-z0,...,...)
currx G:470 LG sdl.b[448] Op13
currx G:470 LG sdl.b[450] currx<x->1,-1
currx G:470 LG sdl.b[468] IF currx<lefts!curry DO ..
currx G:470 LG sdl.b[468] lefts!curry:=currx
currx G:470 LG sdl.b[469] IF currx>rights!curry DO ..
currx G:470 LG sdl.b[469] rights!curry:=currx
currx G:470 LG sdl.b[477] IF currx=x&curry=y DO ..
currx G:470 LG sdl.b[481] currx:=currx+sx
currx G:470 LG sdl.b[565] Op13
currx G:470 LG sdl.b[567] currx,curry,currz
currx G:470 LG sdl.b[568] currx<x->1,-1
currx G:470 LG sdl.b[579] IF currx<=lefts!curry DO ..
currx G:470 LG sdl.b[580] lefts!curry:=currx
currx G:470 LG sdl.b[584] IF currx>=rights!curry DO ..
currx G:470 LG sdl.b[585] rights!curry:=currx
currx G:470 LG sdl.b[590] IF currx=x&curry=y DO ..
currx G:470 LG sdl.b[594] currx:=currx+sx
currx G:470 LG sdl.b[596] currz:=z0+muldiv(z-z0,...,...)
currx G:470 SG sdl.b[104] currx,curry,prevdrawn:=x,y,FALSE
currx G:470 SG sdl.b[107] currx,curry,currz,prevdrawn:=x,y,z,FALSE
currx G:470 SG sdl.b[115] currx,curry,prevdrawn:=x,y,FALSE
currx G:470 SG sdl.b[137] currx,curry:=x,y
currx G:470 SG sdl.b[153] currx,curry,currz:=x,y,z
currx G:470 SG sdl.b[208] currx,curry:=10,curry-14
currx G:470 SG sdl.b[212] currx:=currx+9
currx G:470 SG sdl.b[353] currx,curry:=cx,cy
currx G:470 SG sdl.b[392] currx:=currx+sx
currx G:470 SG sdl.b[428] currx:=currx+sx
currx G:470 SG sdl.b[481] currx:=currx+sx
currx G:470 SG sdl.b[594] currx:=currx+sx
currx G:470 SG sdl.b[688] currx,curry:=x0,y0
currx G:470 SG sdl.b[700] currx,curry:=x0,y0
currx G:470 SG sdl.b[759] currx,curry:=x0,y0
currx G:470 SG sdl.b[830] currx,curry:=x0,y0
currxsize G:487 DEF sdl.h[90] currxsize=
currxsize G:487 LG sdl.b[111] IF ...&...|...&...|x>=currxsize&currx>=currxsize|y>=currysize&curry>=currysize DO ..
currxsize G:487 LG sdl.b[133] IF 0<=x&x<currxsize&0<=y&y<currysize DO ..
currxsize G:487 LG sdl.b[145] IF 0<=x&x<currxsize&0<=y&y<currysize DO ..
currxsize G:487 LG sdl.b[146] @depthscreen!(x+y*currxsize)
currxsize G:487 LG sdl.b[407] curry<y->currxsize,(Op12)
currxsize G:487 LG sdl.b[413] depthscreen:=getvec(currxsize*currysize-1)
currxsize G:487 LG sdl.b[414] FOR i=0 TO currxsize*currysize-1 DO..
currxsize G:487 LG sdl.b[533] IF maxx>currxsize DO ..
currxsize G:487 LG sdl.b[533] maxx:=currxsize-1
currxsize G:487 LG sdl.b[625] depthscreen:=getvec(currxsize*currysize-1)
currxsize G:487 LG sdl.b[626] FOR i=0 TO currxsize*currysize-1 DO..
currxsize G:487 SG sdl.b[101] currsurf,currxsize,currysize:=surf,xsize,ysize
curry G:471 DEF sdl.h[70] curry=
curry G:471 LG sdl.b[111] IF ...&...|...&...|x>=currxsize&currx>=currxsize|y>=currysize&curry>=currysize DO ..
curry G:471 LG sdl.b[119] drawpoint(currx,curry)
curry G:471 LG sdl.b[122] my:=(y+curry)/2
curry G:471 LG sdl.b[123] TEST (mx=currx|mx=x)&(my=curry|my=y) THEN .. ELSE ..
curry G:471 LG sdl.b[156] moveto(currx+dx,curry+dy)
curry G:471 LG sdl.b[157] drawto(currx+dx,curry+dy)
curry G:471 LG sdl.b[159] moveto3d(currx+dx,curry+dy,currz+dz)
curry G:471 LG sdl.b[160] drawto3d(currx+dx,curry+dy,currz+dz)
curry G:471 LG sdl.b[208] currx,curry:=10,curry-14
curry G:471 LG sdl.b[211] write_ch_slice(currx,...-line,ch,line)
curry G:471 LG sdl.b[218] currx,curry
curry G:471 LG sdl.b[381] Op13
curry G:471 LG sdl.b[383] curry<y->1,-1
curry G:471 LG sdl.b[387] drawpoint(currx,curry)
curry G:471 LG sdl.b[388] IF currx=x&curry=y DO ..
curry G:471 LG sdl.b[396] curry:=curry+sy
curry G:471 LG sdl.b[404] Op13
curry G:471 LG sdl.b[406] curry<y->1,-1
curry G:471 LG sdl.b[407] curry<y->currxsize,(Op12)
curry G:471 LG sdl.b[408] currx,curry,currz
curry G:471 LG sdl.b[422] drawpoint3d(currx,curry,currz)
curry G:471 LG sdl.b[424] IF currx=x&curry=y DO ..
curry G:471 LG sdl.b[432] curry:=curry+sy
curry G:471 LG sdl.b[436] currz:=z0+muldiv(z-z0,...,...)
curry G:471 LG sdl.b[449] Op13
curry G:471 LG sdl.b[451] curry<y->1,-1
curry G:471 LG sdl.b[454] IF curry<miny DO ..
curry G:471 LG sdl.b[454] miny:=curry
curry G:471 LG sdl.b[455] IF curry>maxy DO ..
curry G:471 LG sdl.b[455] maxy:=curry
curry G:471 LG sdl.b[467] IF 0<=curry&curry<currysize DO ..
curry G:471 LG sdl.b[468] IF currx<lefts!curry DO ..
curry G:471 LG sdl.b[468] lefts!curry:=currx
curry G:471 LG sdl.b[469] IF currx>rights!curry DO ..
curry G:471 LG sdl.b[469] rights!curry:=currx
curry G:471 LG sdl.b[477] IF currx=x&curry=y DO ..
curry G:471 LG sdl.b[485] curry:=curry+sy
curry G:471 LG sdl.b[566] Op13
curry G:471 LG sdl.b[567] currx,curry,currz
curry G:471 LG sdl.b[569] curry<y->1,-1
curry G:471 LG sdl.b[574] IF 0<=curry&curry<currysize DO ..
curry G:471 LG sdl.b[575] IF curry<miny DO ..
curry G:471 LG sdl.b[575] miny:=curry
curry G:471 LG sdl.b[576] IF curry>maxy DO ..
curry G:471 LG sdl.b[576] maxy:=curry
curry G:471 LG sdl.b[579] IF currx<=lefts!curry DO ..
curry G:471 LG sdl.b[580] lefts!curry:=currx
curry G:471 LG sdl.b[582] leftds!curry:=currz
curry G:471 LG sdl.b[584] IF currx>=rights!curry DO ..
curry G:471 LG sdl.b[585] rights!curry:=currx
curry G:471 LG sdl.b[587] rightds!curry:=currz
curry G:471 LG sdl.b[590] IF currx=x&curry=y DO ..
curry G:471 LG sdl.b[601] curry:=curry+sy
curry G:471 LG sdl.b[603] currz:=z0+muldiv(z-z0,...,...)
curry G:471 SG sdl.b[104] currx,curry,prevdrawn:=x,y,FALSE
curry G:471 SG sdl.b[107] currx,curry,currz,prevdrawn:=x,y,z,FALSE
curry G:471 SG sdl.b[115] currx,curry,prevdrawn:=x,y,FALSE
curry G:471 SG sdl.b[137] currx,curry:=x,y
curry G:471 SG sdl.b[153] currx,curry,currz:=x,y,z
curry G:471 SG sdl.b[208] currx,curry:=10,curry-14
curry G:471 SG sdl.b[353] currx,curry:=cx,cy
curry G:471 SG sdl.b[396] curry:=curry+sy
curry G:471 SG sdl.b[432] curry:=curry+sy
curry G:471 SG sdl.b[485] curry:=curry+sy
curry G:471 SG sdl.b[601] curry:=curry+sy
curry G:471 SG sdl.b[688] currx,curry:=x0,y0
curry G:471 SG sdl.b[700] currx,curry:=x0,y0
curry G:471 SG sdl.b[759] currx,curry:=x0,y0
curry G:471 SG sdl.b[830] currx,curry:=x0,y0
currysize G:488 DEF sdl.h[91] currysize=
currysize G:488 LG sdl.b[111] IF ...&...|...&...|x>=currxsize&currx>=currxsize|y>=currysize&curry>=currysize DO ..
currysize G:488 LG sdl.b[133] IF 0<=x&x<currxsize&0<=y&y<currysize DO ..
currysize G:488 LG sdl.b[134] sys(Sys_sdl,sdl_fillrect,currsurf,...)
currysize G:488 LG sdl.b[145] IF 0<=x&x<currxsize&0<=y&y<currysize DO ..
currysize G:488 LG sdl.b[149] sys(Sys_sdl,sdl_fillrect,currsurf,...)
currysize G:488 LG sdl.b[193] x,currysize-y-1,0,0
currysize G:488 LG sdl.b[200] x,currysize-y-1,0,0
currysize G:488 LG sdl.b[413] depthscreen:=getvec(currxsize*currysize-1)
currysize G:488 LG sdl.b[414] FOR i=0 TO currxsize*currysize-1 DO..
currysize G:488 LG sdl.b[467] IF 0<=curry&curry<currysize DO ..
currysize G:488 LG sdl.b[492] lefts:=getvec(currysize-1)
currysize G:488 LG sdl.b[493] rights:=getvec(currysize-1)
currysize G:488 LG sdl.b[495] sawritef("Unabl'ize=%i3*n",currysize)
currysize G:488 LG sdl.b[500] FOR i=0 TO currysize-1 DO..
currysize G:488 LG sdl.b[507] miny,maxy:=currysize,-1
currysize G:488 LG sdl.b[527] IF maxy>=currysize DO ..
currysize G:488 LG sdl.b[527] maxy:=currysize-1
currysize G:488 LG sdl.b[574] IF 0<=curry&curry<currysize DO ..
currysize G:488 LG sdl.b[611] lefts:=getvec(currysize-1)
currysize G:488 LG sdl.b[612] rights:=getvec(currysize-1)
currysize G:488 LG sdl.b[613] FOR y=0 TO currysize-1 DO..
currysize G:488 LG sdl.b[618] leftds:=getvec(currysize-1)
currysize G:488 LG sdl.b[619] rightds:=getvec(currysize-1)
currysize G:488 LG sdl.b[620] FOR y=0 TO currysize-1 DO..
currysize G:488 LG sdl.b[625] depthscreen:=getvec(currxsize*currysize-1)
currysize G:488 LG sdl.b[626] FOR i=0 TO currxsize*currysize-1 DO..
currysize G:488 LG sdl.b[697] sys(Sys_sdl,sdl_fillrect,currsurf,...)
currysize G:488 LG sdl.b[874] IF y>=currysize-radius DO ..
currysize G:488 LG sdl.b[874] y:=currysize-radius
currysize G:488 LG sdl.b[875] sys(Sys_sdl,sdl_drawfillcircle,currsurf,...)
currysize G:488 SG sdl.b[101] currsurf,currxsize,currysize:=surf,xsize,ysize
currz G:472 DEF sdl.h[71] currz=
currz G:472 LG sdl.b[159] moveto3d(currx+dx,curry+dy,currz+dz)
currz G:472 LG sdl.b[160] drawto3d(currx+dx,curry+dy,currz+dz)
currz G:472 LG sdl.b[408] currx,curry,currz
currz G:472 LG sdl.b[422] drawpoint3d(currx,curry,currz)
currz G:472 LG sdl.b[567] currx,curry,currz
currz G:472 LG sdl.b[582] leftds!curry:=currz
currz G:472 LG sdl.b[587] rightds!curry:=currz
currz G:472 SG sdl.b[107] currx,curry,currz,prevdrawn:=x,y,z,FALSE
currz G:472 SG sdl.b[153] currx,curry,currz:=x,y,z
currz G:472 SG sdl.b[435] currz:=z0+muldiv(z-z0,...,...)
currz G:472 SG sdl.b[436] currz:=z0+muldiv(z-z0,...,...)
currz G:472 SG sdl.b[596] currz:=z0+muldiv(z-z0,...,...)
currz G:472 SG sdl.b[603] currz:=z0+muldiv(z-z0,...,...)
dat_to_strings G:110 DEF libhdr.h[137] dat_to_strings=110
datstamp G:109 DEF libhdr.h[136] datstamp=109
datstring G:108 DEF libhdr.h[135] datstring=108
deadcode M:#xDEADC0DE DEF libhdr.h[243] deadcode=#xDEADC0DE
delay G:128 DEF libhdr.h[155] delay=128
delaytime G:203 DEF astar.b[53] delaytime=
delaytime G:203 LG astar.b[141] writef("delay'stra=%n*n",delaytime,randseed,...)
delaytime G:203 SG astar.b[132] delaytime:=20000
delaytime G:203 SG astar.b[135] delaytime:=!argv!0
delayuntil G:129 DEF libhdr.h[156] delayuntil=129
deleteco G:18 DEF libhdr.h[44] deleteco=18
deletedev G:173 DEF libhdr.h[204] deletedev=173
deletefile G:76 DEF libhdr.h[102] deletefile=76
deleteself G:125 DEF libhdr.h[152] deleteself=125
deletetask G:154 DEF libhdr.h[188] deletetask=154
demote G:232 DEF astar.b[90] demote=
demotecell F:14 LF astar.b[257] demotecell(cell)
demotecell F:14 LF astar.b[451] demotecell(cell,priqn)
demotecell F:14 RT astar.b[454] LET demotecell(cell,p)BE..
deplete G:43 DEF libhdr.h[69] deplete=43
depthscreen G:460 DEF sdl.h[53] depthscreen=
depthscreen G:460 LG sdl.b[146] @depthscreen!(x+y*currxsize)
depthscreen G:460 LG sdl.b[412] UNLESS depthscreen DO ..
depthscreen G:460 LG sdl.b[415] depthscreen!i:=maxint
depthscreen G:460 LG sdl.b[624] UNLESS depthscreen DO ..
depthscreen G:460 LG sdl.b[627] depthscreen!i:=maxint
depthscreen G:460 LG sdl.b[92] IF depthscreen DO ..
depthscreen G:460 LG sdl.b[92] freevec(depthscreen)
depthscreen G:460 SG sdl.b[413] depthscreen:=getvec(currxsize*currysize-1)
depthscreen G:460 SG sdl.b[50] depthscreen:=0
depthscreen G:460 SG sdl.b[625] depthscreen:=getvec(currxsize*currysize-1)
dijkstra G:206 DEF astar.b[56] dijkstra=
dijkstra G:206 LG astar.b[141] writef("delay'stra=%n*n",delaytime,randseed,...)
dijkstra G:206 LG astar.b[157] TEST dijkstra THEN .. ELSE ..
dijkstra G:206 SG astar.b[139] dijkstra:=argv!4
dijkstra_heuristic G:207 DEF astar.b[57] dijkstra_heuristic=
dijkstra_heuristic G:207 FN astar.b[486] LET dijkstra_heuristic(dx,dy)=..
dijkstra_heuristic G:207 LG astar.b[159] heuristic:=dijkstra_heuristic
drawby G:495 DEF sdl.h[99] drawby=
drawby G:495 RT sdl.b[157] LET drawby(dx,dy)BE..
drawby3d G:499 DEF sdl.h[104] drawby3d=
drawby3d G:499 RT sdl.b[160] LET drawby3d(dx,dy,dz)BE..
drawch F:29 LF sdl.b[358] drawch(s%i)
drawch F:29 RT sdl.b[207] LET drawch(ch)BE..
drawcircle G:507 DEF sdl.h[114] drawcircle=
drawcircle G:507 RT sdl.b[833] LET drawcircle(x0,y0,radius)BE..
drawellipse G:509 DEF sdl.h[116] drawellipse=
drawfillcircle G:513 DEF sdl.h[120] drawfillcircle=
drawfillcircle G:513 RT sdl.b[879] LET drawfillcircle(x0,y0,radius)BE..
drawfillcircle1 F:49 RT sdl.b[869] LET drawfillcircle1(x,y,radius)BE..
drawfillellipse G:510 DEF sdl.h[117] drawfillellipse=
drawfillrect G:514 DEF sdl.h[121] drawfillrect=
drawfillrect G:514 LG astar.b[391] drawfillrect(px,py,...,...)
drawfillrect G:514 RT sdl.b[691] LET drawfillrect(x0,y0,x1,y1)BE..
drawfillroundrect G:512 DEF sdl.h[119] drawfillroundrect=
drawfillroundrect G:512 RT sdl.b[762] LET drawfillroundrect(x0,y0,x1,y1,radius)BE..
drawpoint G:490 DEF sdl.h[94] drawpoint=
drawpoint G:490 LG astar.b[386] drawpoint(bx+x,by+y)
drawpoint G:490 LG sdl.b[119] drawpoint(currx,curry)
drawpoint G:490 LG sdl.b[124] drawpoint(x,y)
drawpoint G:490 LG sdl.b[339] drawpoint(x,y)
drawpoint G:490 LG sdl.b[340] drawpoint(x+1,y)
drawpoint G:490 LG sdl.b[341] drawpoint(x+2,y)
drawpoint G:490 LG sdl.b[342] drawpoint(x+3,y)
drawpoint G:490 LG sdl.b[343] drawpoint(x+4,y)
drawpoint G:490 LG sdl.b[344] drawpoint(x+5,y)
drawpoint G:490 LG sdl.b[345] drawpoint(x+6,y)
drawpoint G:490 LG sdl.b[346] drawpoint(x+7,y)
drawpoint G:490 LG sdl.b[387] drawpoint(currx,curry)
drawpoint G:490 LG sdl.b[681] drawpoint(x,ymin)
drawpoint G:490 LG sdl.b[682] drawpoint(x,ymax)
drawpoint G:490 LG sdl.b[685] drawpoint(xmin,y)
drawpoint G:490 LG sdl.b[686] drawpoint(xmax,y)
drawpoint G:490 LG sdl.b[716] drawpoint(x,ymin)
drawpoint G:490 LG sdl.b[717] drawpoint(x,ymax)
drawpoint G:490 LG sdl.b[720] drawpoint(xmin,y)
drawpoint G:490 LG sdl.b[721] drawpoint(xmax,y)
drawpoint G:490 LG sdl.b[732] drawpoint(xmax,ymin+r)
drawpoint G:490 LG sdl.b[733] drawpoint(xmin,ymin+r)
drawpoint G:490 LG sdl.b[734] drawpoint(xmax,ymax-r)
drawpoint G:490 LG sdl.b[735] drawpoint(xmin,ymax-r)
drawpoint G:490 LG sdl.b[749] drawpoint(xmax-r+x,ymax-r+y)
drawpoint G:490 LG sdl.b[750] drawpoint(xmin+r-x,ymax-r+y)
drawpoint G:490 LG sdl.b[751] drawpoint(xmax-r+x,ymin+r-y)
drawpoint G:490 LG sdl.b[752] drawpoint(xmin+r-x,ymin+r-y)
drawpoint G:490 LG sdl.b[753] drawpoint(xmax-r+y,ymax-r+x)
drawpoint G:490 LG sdl.b[754] drawpoint(xmin+r-y,ymax-r+x)
drawpoint G:490 LG sdl.b[755] drawpoint(xmax-r+y,ymin+r-x)
drawpoint G:490 LG sdl.b[756] drawpoint(xmin+r-y,ymin+r-x)
drawpoint G:490 LG sdl.b[776] drawpoint(x,y)
drawpoint G:490 LG sdl.b[777] drawpoint(x,y)
drawpoint G:490 LG sdl.b[789] drawpoint(xmax,ymin+r)
drawpoint G:490 LG sdl.b[790] drawpoint(xmin,ymin+r)
drawpoint G:490 LG sdl.b[791] drawpoint(xmax,ymax-r)
drawpoint G:490 LG sdl.b[792] drawpoint(xmin,ymax-r)
drawpoint G:490 LG sdl.b[806] drawpoint(xmax-r+x,ymax-r+y)
drawpoint G:490 LG sdl.b[807] drawpoint(xmin+r-x,ymax-r+y)
drawpoint G:490 LG sdl.b[808] drawpoint(xmax-r+x,ymin+r-y)
drawpoint G:490 LG sdl.b[809] drawpoint(xmin+r-x,ymin+r-y)
drawpoint G:490 LG sdl.b[810] drawpoint(xmax-r+y,ymax-r+x)
drawpoint G:490 LG sdl.b[811] drawpoint(xmin+r-y,ymax-r+x)
drawpoint G:490 LG sdl.b[812] drawpoint(xmax-r+y,ymin+r-x)
drawpoint G:490 LG sdl.b[813] drawpoint(xmin+r-y,ymin+r-x)
drawpoint G:490 LG sdl.b[817] drawpoint(fx,ymax-r+x)
drawpoint G:490 LG sdl.b[818] drawpoint(fx,ymin+r-x)
drawpoint G:490 LG sdl.b[824] drawpoint(fx,ymax-r+y)
drawpoint G:490 LG sdl.b[825] drawpoint(fx,ymin+r-y)
drawpoint G:490 LG sdl.b[841] drawpoint(x0,y0+radius)
drawpoint G:490 LG sdl.b[842] drawpoint(x0,y0-radius)
drawpoint G:490 LG sdl.b[843] drawpoint(x0+radius,y0)
drawpoint G:490 LG sdl.b[844] drawpoint(x0-radius,y0)
drawpoint G:490 LG sdl.b[858] drawpoint(x0+x,y0+y)
drawpoint G:490 LG sdl.b[859] drawpoint(x0-x,y0+y)
drawpoint G:490 LG sdl.b[860] drawpoint(x0+x,y0-y)
drawpoint G:490 LG sdl.b[861] drawpoint(x0-x,y0-y)
drawpoint G:490 LG sdl.b[862] drawpoint(x0+y,y0+x)
drawpoint G:490 LG sdl.b[863] drawpoint(x0-y,y0+x)
drawpoint G:490 LG sdl.b[864] drawpoint(x0+y,y0-x)
drawpoint G:490 LG sdl.b[865] drawpoint(x0-y,y0-x)
drawpoint G:490 LG sdl.b[888] drawpoint(x0,y0+radius)
drawpoint G:490 LG sdl.b[889] drawpoint(x0,y0-radius)
drawpoint G:490 LG sdl.b[890] drawpoint(x,y0)
drawpoint G:490 LG sdl.b[904] drawpoint(x0+x,y0+y)
drawpoint G:490 LG sdl.b[905] drawpoint(x0-x,y0+y)
drawpoint G:490 LG sdl.b[906] drawpoint(x0+x,y0-y)
drawpoint G:490 LG sdl.b[907] drawpoint(x0-x,y0-y)
drawpoint G:490 LG sdl.b[908] drawpoint(x0+y,y0+x)
drawpoint G:490 LG sdl.b[909] drawpoint(x0-y,y0+x)
drawpoint G:490 LG sdl.b[910] drawpoint(x0+y,y0-x)
drawpoint G:490 LG sdl.b[911] drawpoint(x0-y,y0-x)
drawpoint G:490 LG sdl.b[914] drawpoint(fx,y0+x)
drawpoint G:490 LG sdl.b[915] drawpoint(fx,y0-x)
drawpoint G:490 LG sdl.b[921] drawpoint(fx,y0+y)
drawpoint G:490 LG sdl.b[922] drawpoint(fx,y0-y)
drawpoint G:490 RT sdl.b[130] LET drawpoint(x,y)BE..
drawpoint3d G:491 DEF sdl.h[95] drawpoint3d=
drawpoint3d G:491 LG sdl.b[422] drawpoint3d(currx,curry,currz)
drawpoint3d G:491 RT sdl.b[140] LET drawpoint3d(x,y,z)BE..
drawquad G:500 DEF sdl.h[106] drawquad=
drawquad G:500 RT sdl.b[504] LET drawquad(x1,y1,x2,y2,x3,y3,x4,y4)BE..
drawquad3d G:503 DEF sdl.h[109] drawquad3d=
drawquad3d G:503 RT sdl.b[631] LET drawquad3d(x1,y1,z1,x2,y2,z2,x3,...)BE..
drawrect G:508 DEF sdl.h[115] drawrect=
drawrect G:508 RT sdl.b[674] LET drawrect(x0,y0,x1,y1)BE..
drawroundrect G:511 DEF sdl.h[118] drawroundrect=
drawroundrect G:511 RT sdl.b[703] LET drawroundrect(x0,y0,x1,y1,radius)BE..
drawstring G:506 DEF sdl.h[113] drawstring=
drawstring G:506 LG sdl.b[369] drawstring(x,y,plotfstr)
drawstring G:506 RT sdl.b[356] LET drawstring(x,y,s)BE..
drawto G:494 DEF sdl.h[98] drawto=
drawto G:494 LG sdl.b[125] drawto(mx,my)
drawto G:494 LG sdl.b[126] drawto(x,y)
drawto G:494 LG sdl.b[157] drawto(currx+dx,curry+dy)
drawto G:494 LG sdl.b[538] drawto(maxx,y)
drawto G:494 LG sdl.b[556] drawto(rights!y,y)
drawto G:494 RT sdl.b[378] LET drawto(x,y)BE..
drawto1 F:11 RT sdl.b[109] LET drawto1(x,y)BE..
drawto3d G:498 DEF sdl.h[103] drawto3d=
drawto3d G:498 LG sdl.b[160] drawto3d(currx+dx,curry+dy,currz+dz)
drawto3d G:498 LG sdl.b[646] drawto3d(rights!y,y,rightds!y)
drawto3d G:498 LG sdl.b[666] drawto3d(rights!y,y,rightds!y)
drawto3d G:498 RT sdl.b[401] LET drawto3d(x,y,z)BE..
drawtriangle G:501 DEF sdl.h[107] drawtriangle=
drawtriangle G:501 RT sdl.b[544] LET drawtriangle(x1,y1,x2,y2,x3,y3)BE..
drawtriangle3d G:504 DEF sdl.h[110] drawtriangle3d=
drawtriangle3d G:504 RT sdl.b[654] LET drawtriangle3d(x1,y1,z1,x2,y2,z2,x3,...)BE..
drawwall G:235 DEF astar.b[94] drawwall=
drawwall G:235 LG astar.b[316] drawwall(0,0,128,1)
drawwall G:235 LG astar.b[317] drawwall(0,127,128,128)
drawwall G:235 LG astar.b[318] drawwall(0,1,1,127)
drawwall G:235 LG astar.b[319] drawwall(127,1,128,127)
drawwall G:235 LG astar.b[321] drawwall(40,118,70,120)
drawwall G:235 LG astar.b[322] drawwall(40,92,40,118)
drawwall G:235 LG astar.b[323] drawwall(68,92,70,118)
drawwall G:235 LG astar.b[324] drawwall(40,90,70,92)
drawwall G:235 LG astar.b[326] drawwall(75,86,100,88)
drawwall G:235 LG astar.b[327] drawwall(98,60,100,86)
drawwall G:235 LG astar.b[330] drawwall(20,75,70,77)
drawwall G:235 LG astar.b[331] drawwall(68,50,70,75)
drawwall G:235 LG astar.b[332] drawwall(40,48,70,50)
drawwall G:235 LG astar.b[334] drawwall(32,38,110,40)
drawwall G:235 LG astar.b[335] drawwall(32,22,34,38)
drawwall G:235 LG astar.b[336] drawwall(108,22,110,38)
drawwall G:235 LG astar.b[337] drawwall(32,20,80,22)
drawwall G:235 LG astar.b[338] drawwall(84,20,110,22)
drawwall G:235 RT astar.b[341] LET drawwall(x1,y1,x2,y2)BE..
endread G:60 DEF libhdr.h[86] endread=60
endstream G:62 DEF libhdr.h[88] endstream=62
endstreamch M:-1 DEF libhdr.h[226] endstreamch=-1
endtask G:162 DEF libhdr.h[196] endtask=162
endwrite G:61 DEF libhdr.h[87] endwrite=61
entryword M:57311 DEF libhdr.h[245] entryword=57311
eventa1 G:478 DEF sdl.h[80] eventa1=
eventa2 G:479 DEF sdl.h[81] eventa2=
eventa3 G:480 DEF sdl.h[82] eventa3=
eventa4 G:481 DEF sdl.h[83] eventa4=
eventa5 G:482 DEF sdl.h[84] eventa5=
eventtype G:477 DEF sdl.h[79] eventtype=
eventtype G:477 LLG sdl.b[165] RESULTIS sys(Sys_sdl,sdl_pollevent,@eventtype)
fault G:174 DEF libhdr.h[205] fault=174
fillsurf G:515 DEF sdl.h[123] fillsurf=
fillsurf G:515 LG astar.b[188] fillsurf(col_gray)
fillsurf G:515 RT sdl.b[204] LET fillsurf(col)BE..
fin F:18 LAB astar.b[206] fin:closesdl()
fin F:18 LF astar.b[129] GOTO fin
findappend G:130 DEF libhdr.h[157] findappend=130
findarg G:104 DEF libhdr.h[131] findarg=104
findinoutput G:50 DEF libhdr.h[76] findinoutput=50
findinput G:48 DEF libhdr.h[74] findinput=48
findoutput G:49 DEF libhdr.h[75] findoutput=49
findshortestpath G:233 DEF astar.b[92] findshortestpath=
findshortestpath G:233 FN astar.b[214] LET findshortestpath(fromcell,tocell)=..
findshortestpath G:233 LG astar.b[196] findshortestpath(startcell,goalcell)
findstream G:52 DEF libhdr.h[78] findstream=52
findupdate G:51 DEF libhdr.h[77] findupdate=51
fl_F2N M:42 DEF libhdr.h[515] fl_F2N=
fl_N2F M:41 DEF libhdr.h[514] fl_N2F=
fl_abs M:5 DEF libhdr.h[488] fl_abs=
fl_acos M:20 DEF libhdr.h[492] fl_acos=20
fl_add M:8 DEF libhdr.h[489] fl_add=
fl_asin M:21 DEF libhdr.h[493] fl_asin=
fl_atan M:22 DEF libhdr.h[494] fl_atan=
fl_atan2 M:23 DEF libhdr.h[495] fl_atan2=
fl_avail M:0 DEF libhdr.h[486] fl_avail=0
fl_ceil M:38 DEF libhdr.h[510] fl_ceil=
fl_cos M:24 DEF libhdr.h[496] fl_cos=
fl_cosh M:27 DEF libhdr.h[499] fl_cosh=
fl_div M:7 DEF libhdr.h[489] fl_div=
fl_eq M:12 DEF libhdr.h[490] fl_eq=
fl_exp M:30 DEF libhdr.h[502] fl_exp=
fl_fix M:4 DEF libhdr.h[488] fl_fix=
fl_float M:3 DEF libhdr.h[488] fl_float=
fl_floor M:39 DEF libhdr.h[511] fl_floor=
fl_fmod M:40 DEF libhdr.h[512] fl_fmod=
fl_frexp M:31 DEF libhdr.h[503] fl_frexp=
fl_ge M:17 DEF libhdr.h[490] fl_ge=
fl_gr M:15 DEF libhdr.h[490] fl_gr=
fl_ldexp M:32 DEF libhdr.h[504] fl_ldexp=
fl_le M:16 DEF libhdr.h[490] fl_le=
fl_log M:33 DEF libhdr.h[505] fl_log=
fl_log10 M:34 DEF libhdr.h[506] fl_log10=
fl_ls M:14 DEF libhdr.h[490] fl_ls=
fl_mk M:1 DEF libhdr.h[487] fl_mk=
fl_modf M:35 DEF libhdr.h[507] fl_modf=
fl_mul M:6 DEF libhdr.h[489] fl_mul=
fl_ne M:13 DEF libhdr.h[490] fl_ne=
fl_neg M:11 DEF libhdr.h[489] fl_neg=
fl_pos M:10 DEF libhdr.h[489] fl_pos=
fl_pow M:36 DEF libhdr.h[508] fl_pow=
fl_radius2 M:43 DEF libhdr.h[516] fl_radius2=
fl_radius3 M:44 DEF libhdr.h[517] fl_radius3=
fl_sin M:25 DEF libhdr.h[497] fl_sin=
fl_sinh M:28 DEF libhdr.h[500] fl_sinh=
fl_sqrt M:37 DEF libhdr.h[509] fl_sqrt=
fl_sub M:9 DEF libhdr.h[489] fl_sub=
fl_tan M:26 DEF libhdr.h[498] fl_tan=
fl_tanh M:29 DEF libhdr.h[501] fl_tanh=
fl_unmk M:2 DEF libhdr.h[487] fl_unmk=
flag_a M:1 DEF libhdr.h[640] flag_a=1<<0
flag_b M:2 DEF libhdr.h[641] flag_b=1<<1
flag_c M:4 DEF libhdr.h[642] flag_c=1<<2
flag_d M:8 DEF libhdr.h[643] flag_d=1<<3
flag_e M:16 DEF libhdr.h[644] flag_e=1<<4
format G:455 DEF sdl.h[47] format=
format G:455 LG sdl.b[185] RESULTIS sys(Sys_sdl,sdl_mksurface,format,...)
format G:455 LG sdl.b[83] sys(Sys_sdl,sdl_maprgb,format,...)
format G:455 SG sdl.b[76] format:=fmt
freeobj G:78 DEF libhdr.h[104] freeobj=78
freesurface G:484 DEF sdl.h[87] freesurface=
freesurface G:484 RT sdl.b[188] LET freesurface(surf)BE..
freevec G:27 DEF libhdr.h[53] freevec=27
freevec G:27 LG astar.b[208] freevec(spacev)
freevec G:27 LG astar.b[209] freevec(priq)
freevec G:27 LG sdl.b[88] freevec(lefts)
freevec G:27 LG sdl.b[89] freevec(rights)
freevec G:27 LG sdl.b[90] freevec(leftds)
freevec G:27 LG sdl.b[91] freevec(rightds)
freevec G:27 LG sdl.b[92] freevec(depthscreen)
g_colist M:8 DEF libhdr.h[251] g_colist=8
g_currco M:7 DEF libhdr.h[250] g_currco=7
g_extbase M:950 DEF libhdr.h[658] g_extbase=950
g_glbase M:450 DEF libhdr.h[657] g_glbase=450
g_globsize M:0 DEF libhdr.h[248] g_globsize=0
g_grfbase M:400 DEF libhdr.h[654] g_grfbase=400
g_keyboard M:20 DEF libhdr.h[255] g_keyboard=20
g_memsize M:14 DEF libhdr.h[254] g_memsize=14
g_rootnode M:9 DEF libhdr.h[252] g_rootnode=9
g_screen M:21 DEF libhdr.h[256] g_screen=21
g_sdlbase M:450 DEF libhdr.h[656] g_sdlbase=450
g_sdlbase M:450 MAN sdl.h[41] initsdl=g_sdlbase
g_sndbase M:400 DEF libhdr.h[655] g_sndbase=400
g_sys M:3 DEF libhdr.h[249] g_sys=3
get_index_record G:73 DEF libhdr.h[99] get_index_record=73
get_record G:71 DEF libhdr.h[97] get_record=71
get_text G:93 DEF libhdr.h[120] get_text=93
get_textblib G:93 DEF libhdr.h[119] get_textblib=93
getevent G:520 DEF sdl.h[131] getevent=
getevent G:520 FN sdl.b[163] LET getevent()=..
getleast G:220 DEF astar.b[74] getleast=
getleast G:230 DEF astar.b[88] getleast=
getleast G:230 FN astar.b[404] LET getleast()=..
getleast G:230 LG astar.b[221] getleast()
getlogname G:118 DEF libhdr.h[145] getlogname=118
getmousestate G:519 DEF sdl.h[130] getmousestate=
getmousestate G:519 FN sdl.b[929] LET getmousestate()=..
getremipaddr G:54 DEF libhdr.h[80] getremipaddr=54
getvec G:25 DEF libhdr.h[51] getvec=25
getvec G:25 LG astar.b[147] spacev:=getvec(spacevupb)
getvec G:25 LG astar.b[152] priq:=getvec(priqupb)
getvec G:25 LG sdl.b[413] depthscreen:=getvec(currxsize*currysize-1)
getvec G:25 LG sdl.b[492] lefts:=getvec(currysize-1)
getvec G:25 LG sdl.b[493] rights:=getvec(currysize-1)
getvec G:25 LG sdl.b[611] lefts:=getvec(currysize-1)
getvec G:25 LG sdl.b[612] rights:=getvec(currysize-1)
getvec G:25 LG sdl.b[618] leftds:=getvec(currysize-1)
getvec G:25 LG sdl.b[619] rightds:=getvec(currysize-1)
getvec G:25 LG sdl.b[625] depthscreen:=getvec(currxsize*currysize-1)
getword G:32 DEF libhdr.h[58] getword=32
globin G:24 DEF libhdr.h[50] globin=24
globsize G:0 DEF libhdr.h[26] globsize=0
globword M:#x8F8F0000 DEF libhdr.h[241] globword=#x8F8F0000
goalcell G:225 DEF astar.b[82] goalcell=
goalcell G:225 LG astar.b[196] findshortestpath(startcell,goalcell)
goalcell G:225 LG astar.b[218] s_f!fromcell:=s_g+heuristic(fromcell,goalcell)
goalcell G:225 LG astar.b[375] IF cell=goalcell DO ..
goalcell G:225 SG astar.b[192] goalcell:=areav!position(100,95)
heuristic G:209 DEF astar.b[59] heuristic=
heuristic G:209 LG astar.b[218] s_f!fromcell:=s_g+heuristic(fromcell,goalcell)
heuristic G:209 LG astar.b[247] s_f!cell:=tg+heuristic(cell,tocell)
heuristic G:209 LG astar.b[256] s_f!cell:=tg+heuristic(cell,tocell)
heuristic G:209 SG astar.b[159] heuristic:=dijkstra_heuristic
heuristic G:209 SG astar.b[162] heuristic:=astar_heuristic
hidecursor G:523 DEF sdl.h[136] hidecursor=
hidecursor G:523 FN sdl.b[176] LET hidecursor()=..
hold G:158 DEF libhdr.h[192] hold=158
id_appendscb M:132 DEF libhdr.h[438] id_appendscb=132
id_inoutscb M:131 DEF libhdr.h[437] id_inoutscb=131
id_inscb M:129 DEF libhdr.h[435] id_inscb=129
id_outscb M:130 DEF libhdr.h[436] id_outscb=130
initco G:22 DEF libhdr.h[48] initco=22
initio G:46 DEF libhdr.h[72] initio=46
initsdl G:450 DEF sdl.h[41] initsdl=g_sdlbase
initsdl G:450 FN sdl.b[34] LET initsdl()=..
initsdl G:450 LG astar.b[155] initsdl()
input G:58 DEF libhdr.h[84] input=58
insert G:231 DEF astar.b[89] insert=
insert G:231 LG astar.b[219] insert(startcell)
insert G:231 LG astar.b[248] insert(cell)
insert G:231 RT astar.b[442] LET insert(cell)BE..
instrcount G:121 DEF libhdr.h[148] instrcount=121
intflag G:119 DEF libhdr.h[146] intflag=119
isrregs M:41 DEF libhdr.h[433] isrregs=41
joystick G:463 DEF sdl.h[59] joystick=
joystick G:463 SG sdl.b[44] joystick:=sys(Sys_sdl,sdl_joystickopen,0)
klibregs M:21 DEF libhdr.h[431] klibregs=21
leftds G:457 DEF sdl.h[50] leftds=
leftds G:457 LG sdl.b[582] leftds!curry:=currz
leftds G:457 LG sdl.b[617] UNLESS leftds DO ..
leftds G:457 LG sdl.b[621] leftds!y,rightds!y:=maxint,maxint
leftds G:457 LG sdl.b[645] moveto3d(lefts!y,y,leftds!y)
leftds G:457 LG sdl.b[649] leftds!y,rightds!y:=maxint,maxint
leftds G:457 LG sdl.b[665] moveto3d(lefts!y,y,leftds!y)
leftds G:457 LG sdl.b[669] leftds!y,rightds!y:=maxint,maxint
leftds G:457 LG sdl.b[90] IF leftds DO ..
leftds G:457 LG sdl.b[90] freevec(leftds)
leftds G:457 SG sdl.b[49] leftds,rightds:=0,0
leftds G:457 SG sdl.b[618] leftds:=getvec(currysize-1)
lefts G:456 DEF sdl.h[49] lefts=
lefts G:456 LG sdl.b[468] IF currx<lefts!curry DO ..
lefts G:456 LG sdl.b[468] lefts!curry:=currx
lefts G:456 LG sdl.b[491] UNLESS lefts DO ..
lefts G:456 LG sdl.b[494] UNLESS lefts&rights DO ..
lefts G:456 LG sdl.b[501] lefts!i,rights!i:=maxint,minint
lefts G:456 LG sdl.b[530] lefts!y
lefts G:456 LG sdl.b[539] lefts!y,rights!y:=maxint,minint
lefts G:456 LG sdl.b[555] moveto(lefts!y,y)
lefts G:456 LG sdl.b[557] lefts!y,rights!y:=maxint,minint
lefts G:456 LG sdl.b[579] IF currx<=lefts!curry DO ..
lefts G:456 LG sdl.b[580] lefts!curry:=currx
lefts G:456 LG sdl.b[610] UNLESS lefts DO ..
lefts G:456 LG sdl.b[614] lefts!y,rights!y:=maxint,minint
lefts G:456 LG sdl.b[645] moveto3d(lefts!y,y,leftds!y)
lefts G:456 LG sdl.b[648] lefts!y,rights!y:=maxint,minint
lefts G:456 LG sdl.b[665] moveto3d(lefts!y,y,leftds!y)
lefts G:456 LG sdl.b[668] lefts!y,rights!y:=maxint,minint
lefts G:456 LG sdl.b[88] IF lefts DO ..
lefts G:456 LG sdl.b[88] freevec(lefts)
lefts G:456 SG sdl.b[48] lefts,rights:=0,0
lefts G:456 SG sdl.b[492] lefts:=getvec(currysize-1)
lefts G:456 SG sdl.b[611] lefts:=getvec(currysize-1)
level G:15 DEF libhdr.h[41] level=15
loadseg G:105 DEF libhdr.h[132] loadseg=105
locatedir G:80 DEF libhdr.h[106] locatedir=80
locateobj G:81 DEF libhdr.h[107] locateobj=81
longjump G:16 DEF libhdr.h[42] longjump=16
maprgb G:467 DEF sdl.h[64] maprgb=
maprgb G:467 FN sdl.b[83] LET maprgb(r,g,b)=..
maprgb G:467 LG astar.b[165] col_black:=maprgb(0,0,0)
maprgb G:467 LG astar.b[166] col_blue:=maprgb(0,0,255)
maprgb G:467 LG astar.b[167] col_green:=maprgb(0,255,0)
maprgb G:467 LG astar.b[168] col_yellow:=maprgb(0,255,255)
maprgb G:467 LG astar.b[169] col_red:=maprgb(255,0,0)
maprgb G:467 LG astar.b[170] col_majenta:=maprgb(255,0,255)
maprgb G:467 LG astar.b[171] col_cyan:=maprgb(255,255,0)
maprgb G:467 LG astar.b[172] col_white:=maprgb(255,255,255)
maprgb G:467 LG astar.b[173] col_darkgray:=maprgb(64,64,64)
maprgb G:467 LG astar.b[174] col_darkblue:=maprgb(0,0,64)
maprgb G:467 LG astar.b[175] col_darkgreen:=maprgb(0,64,0)
maprgb G:467 LG astar.b[176] col_darkyellow:=maprgb(0,64,64)
maprgb G:467 LG astar.b[177] col_darkred:=maprgb(128,0,0)
maprgb G:467 LG astar.b[178] col_darkmajenta:=maprgb(64,0,64)
maprgb G:467 LG astar.b[179] col_darkcyan:=maprgb(64,64,0)
maprgb G:467 LG astar.b[180] col_gray:=maprgb(128,128,128)
maprgb G:467 LG astar.b[181] col_lightblue:=maprgb(128,128,255)
maprgb G:467 LG astar.b[182] col_lightgreen:=maprgb(128,255,128)
maprgb G:467 LG astar.b[183] col_lightyellow:=maprgb(128,255,255)
maprgb G:467 LG astar.b[184] col_lightred:=maprgb(255,128,128)
maprgb G:467 LG astar.b[185] col_lightmajenta:=maprgb(255,128,255)
maprgb G:467 LG astar.b[186] col_lightcyan:=maprgb(255,255,128)
maxint M:#x7FFFFFFF DEF libhdr.h[224] maxint=minint-1
maxint M:#x7FFFFFFF MAN astar.b[285] s_f!cell:=maxint
maxint M:#x7FFFFFFF MAN sdl.b[415] depthscreen!i:=maxint
maxint M:#x7FFFFFFF MAN sdl.b[501] lefts!i,rights!i:=maxint,minint
maxint M:#x7FFFFFFF MAN sdl.b[539] lefts!y,rights!y:=maxint,minint
maxint M:#x7FFFFFFF MAN sdl.b[547] miny,maxy:=maxint,minint
maxint M:#x7FFFFFFF MAN sdl.b[557] lefts!y,rights!y:=maxint,minint
maxint M:#x7FFFFFFF MAN sdl.b[614] lefts!y,rights!y:=maxint,minint
maxint M:#x7FFFFFFF MAN sdl.b[621] leftds!y,rightds!y:=maxint,maxint
maxint M:#x7FFFFFFF MAN sdl.b[627] depthscreen!i:=maxint
maxint M:#x7FFFFFFF MAN sdl.b[636] miny,maxy:=maxint,minint
maxint M:#x7FFFFFFF MAN sdl.b[648] lefts!y,rights!y:=maxint,minint
maxint M:#x7FFFFFFF MAN sdl.b[649] leftds!y,rightds!y:=maxint,maxint
maxint M:#x7FFFFFFF MAN sdl.b[657] miny,maxy:=maxint,minint
maxint M:#x7FFFFFFF MAN sdl.b[668] lefts!y,rights!y:=maxint,minint
maxint M:#x7FFFFFFF MAN sdl.b[669] leftds!y,rightds!y:=maxint,maxint
maxy G:462 DEF sdl.h[57] maxy=
maxy G:462 LG sdl.b[455] IF curry>maxy DO ..
maxy G:462 LG sdl.b[527] IF maxy>=currysize DO ..
maxy G:462 LG sdl.b[529] FOR y=miny TO maxy DO..
maxy G:462 LG sdl.b[554] FOR y=miny TO maxy DO..
maxy G:462 LG sdl.b[576] IF curry>maxy DO ..
maxy G:462 LG sdl.b[644] FOR y=miny TO maxy DO..
maxy G:462 LG sdl.b[664] FOR y=miny TO maxy DO..
maxy G:462 SG sdl.b[455] maxy:=curry
maxy G:462 SG sdl.b[507] miny,maxy:=currysize,-1
maxy G:462 SG sdl.b[527] maxy:=currysize-1
maxy G:462 SG sdl.b[547] miny,maxy:=maxint,minint
maxy G:462 SG sdl.b[576] maxy:=curry
maxy G:462 SG sdl.b[636] miny,maxy:=maxint,minint
maxy G:462 SG sdl.b[657] miny,maxy:=maxint,minint
mcaddrinc M:4 DEF libhdr.h[222] mcaddrinc=bytesperword
memoryfree G:131 DEF libhdr.h[158] memoryfree=131
minint M:#x80000000 DEF libhdr.h[223] minint=1<<bitsperword-1
minint M:#x80000000 MAN libhdr.h[224] maxint=minint-1
minint M:#x80000000 MAN sdl.b[501] lefts!i,rights!i:=maxint,minint
minint M:#x80000000 MAN sdl.b[539] lefts!y,rights!y:=maxint,minint
minint M:#x80000000 MAN sdl.b[547] miny,maxy:=maxint,minint
minint M:#x80000000 MAN sdl.b[557] lefts!y,rights!y:=maxint,minint
minint M:#x80000000 MAN sdl.b[614] lefts!y,rights!y:=maxint,minint
minint M:#x80000000 MAN sdl.b[636] miny,maxy:=maxint,minint
minint M:#x80000000 MAN sdl.b[648] lefts!y,rights!y:=maxint,minint
minint M:#x80000000 MAN sdl.b[657] miny,maxy:=maxint,minint
minint M:#x80000000 MAN sdl.b[668] lefts!y,rights!y:=maxint,minint
miny G:461 DEF sdl.h[56] miny=
miny G:461 LG sdl.b[454] IF curry<miny DO ..
miny G:461 LG sdl.b[526] IF miny<0 DO ..
miny G:461 LG sdl.b[529] FOR y=miny TO maxy DO..
miny G:461 LG sdl.b[554] FOR y=miny TO maxy DO..
miny G:461 LG sdl.b[575] IF curry<miny DO ..
miny G:461 LG sdl.b[644] FOR y=miny TO maxy DO..
miny G:461 LG sdl.b[664] FOR y=miny TO maxy DO..
miny G:461 SG sdl.b[454] miny:=curry
miny G:461 SG sdl.b[507] miny,maxy:=currysize,-1
miny G:461 SG sdl.b[526] miny:=0
miny G:461 SG sdl.b[547] miny,maxy:=maxint,minint
miny G:461 SG sdl.b[575] miny:=curry
miny G:461 SG sdl.b[636] miny,maxy:=maxint,minint
miny G:461 SG sdl.b[657] miny,maxy:=maxint,minint
mkscreen G:451 DEF sdl.h[42] mkscreen=
mkscreen G:451 FN sdl.b[56] LET mkscreen(title,xsize,ysize)=..
mkscreen G:451 LG astar.b[158] mkscreen("Dijks'thm Demo",700,700)
mkscreen G:451 LG astar.b[161] mkscreen("A** Al'thm Demo",700,700)
mksurface G:483 DEF sdl.h[86] mksurface=
mksurface G:483 FN sdl.b[183] LET mksurface(w,h)=..
mousebuttons G:476 DEF sdl.h[77] mousebuttons=
mousex G:474 DEF sdl.h[75] mousex=
mousey G:475 DEF sdl.h[76] mousey=
moveby G:493 DEF sdl.h[97] moveby=
moveby G:493 RT sdl.b[156] LET moveby(dx,dy)BE..
moveby3d G:497 DEF sdl.h[102] moveby3d=
moveby3d G:497 RT sdl.b[159] LET moveby3d(dx,dy,dz)BE..
movesurf G:516 DEF sdl.h[124] movesurf=
moveto G:492 DEF sdl.h[96] moveto=
moveto G:492 LG sdl.b[156] moveto(currx+dx,curry+dy)
moveto G:492 LG sdl.b[357] moveto(x,y)
moveto G:492 LG sdl.b[513] moveto(x1,y1)
moveto G:492 LG sdl.b[536] moveto(minx,y)
moveto G:492 LG sdl.b[541] moveto(x1,y1)
moveto G:492 LG sdl.b[549] moveto(x1,y1)
moveto G:492 LG sdl.b[555] moveto(lefts!y,y)
moveto G:492 LG sdl.b[559] moveto(x1,y1)
moveto G:492 RT sdl.b[103] LET moveto(x,y)BE..
moveto3d G:496 DEF sdl.h[101] moveto3d=
moveto3d G:496 LG sdl.b[159] moveto3d(currx+dx,curry+dy,currz+dz)
moveto3d G:496 LG sdl.b[638] moveto3d(x1,y1,z1)
moveto3d G:496 LG sdl.b[645] moveto3d(lefts!y,y,leftds!y)
moveto3d G:496 LG sdl.b[651] moveto3d(x1,y1,z1)
moveto3d G:496 LG sdl.b[659] moveto3d(x1,y1,z1)
moveto3d G:496 LG sdl.b[665] moveto3d(lefts!y,y,leftds!y)
moveto3d G:496 LG sdl.b[671] moveto3d(x1,y1,z1)
moveto3d G:496 RT sdl.b[106] LET moveto3d(x,y,z)BE..
muldiv G:5 DEF libhdr.h[31] muldiv=5
muldiv G:5 LG sdl.b[435] currz:=z0+muldiv(z-z0,...,...)
muldiv G:5 LG sdl.b[436] currz:=z0+muldiv(z-z0,...,...)
muldiv G:5 LG sdl.b[596] currz:=z0+muldiv(z-z0,...,...)
muldiv G:5 LG sdl.b[603] currz:=z0+muldiv(z-z0,...,...)
neighbourcost G:234 DEF astar.b[93] neighbourcost=
neighbourcost G:234 FN astar.b[266] LET neighbourcost(dx,dy)=..
neighbourcost G:234 LG astar.b[235] g+neighbourcost(dx,dy)
newcell G:223 DEF astar.b[79] newcell=
newcell G:223 FN astar.b[279] LET newcell()=..
newcell G:223 LG astar.b[302] newcell()
newline G:84 DEF libhdr.h[110] newline=84
newpage G:120 DEF libhdr.h[147] newpage=120
newvec G:222 DEF astar.b[78] newvec=
newvec G:222 FN astar.b[268] LET newvec(upb)=..
newvec G:222 LG astar.b[280] newvec(s_upb)
newvec G:222 LG astar.b[298] areav:=newvec(position(xsize-1,ysize-1))
note G:63 DEF libhdr.h[89] note=63
notinuse M:-1 DEF libhdr.h[543] notinuse=-1
output G:59 DEF libhdr.h[85] output=59
packstring G:30 DEF libhdr.h[56] packstring=30
pathfindinput G:53 DEF libhdr.h[79] pathfindinput=53
peercom G:179 DEF libhdr.h[208] peercom=179
pkt_a1 M:5 DEF libhdr.h[552] pkt_a1=5
pkt_a2 M:6 DEF libhdr.h[553] pkt_a2=6
pkt_a3 M:7 DEF libhdr.h[554] pkt_a3=7
pkt_a4 M:8 DEF libhdr.h[555] pkt_a4=8
pkt_a5 M:9 DEF libhdr.h[556] pkt_a5=9
pkt_a6 M:10 DEF libhdr.h[557] pkt_a6=10
pkt_arg1 M:5 DEF libhdr.h[552] pkt_arg1=5
pkt_arg2 M:6 DEF libhdr.h[553] pkt_arg2=6
pkt_arg3 M:7 DEF libhdr.h[554] pkt_arg3=7
pkt_arg4 M:8 DEF libhdr.h[555] pkt_arg4=8
pkt_arg5 M:9 DEF libhdr.h[556] pkt_arg5=9
pkt_arg6 M:10 DEF libhdr.h[557] pkt_arg6=10
pkt_devid M:1 DEF libhdr.h[548] pkt_devid=1
pkt_devtaskid M:1 DEF libhdr.h[548] pkt_devtaskid=1
pkt_id M:1 DEF libhdr.h[548] pkt_id=1
pkt_link M:0 DEF libhdr.h[547] pkt_link=0
pkt_op M:2 DEF libhdr.h[549] pkt_op=2
pkt_r1 M:3 DEF libhdr.h[550] pkt_r1=3
pkt_r2 M:4 DEF libhdr.h[551] pkt_r2=4
pkt_res1 M:3 DEF libhdr.h[550] pkt_res1=3
pkt_res2 M:4 DEF libhdr.h[551] pkt_res2=4
pkt_taskid M:1 DEF libhdr.h[548] pkt_taskid=1
pkt_type M:2 DEF libhdr.h[549] pkt_type=2
plotarea G:228 DEF astar.b[86] plotarea=
plotarea G:228 LG astar.b[201] plotarea()
plotarea G:228 RT astar.b[363] LET plotarea()BE..
plotcell G:236 DEF astar.b[95] plotcell=
plotcell G:236 LG astar.b[368] plotcell(cell,x,y)
plotcell G:236 RT astar.b[372] LET plotcell(cell,x,y)BE..
plotf G:526 DEF sdl.h[140] plotf=
plotf G:526 RT sdl.b[361] LET plotf(x,y,form,a,b,c,d,...)BE..
plotfstr G:527 DEF sdl.h[141] plotfstr=
plotfstr G:527 LG sdl.b[365] plotfstr%0:=0
plotfstr G:527 LG sdl.b[369] drawstring(x,y,plotfstr)
plotfstr G:527 LG sdl.b[373] plotfstr%0+1
plotfstr G:527 LG sdl.b[374] plotfstr%strlen:=ch
plotfstr G:527 LG sdl.b[375] plotfstr%0:=strlen
plotfstr G:527 SG sdl.b[364] plotfstr:=s
plotwrch F:33 LF sdl.b[366] wrch:=plotwrch
plotwrch F:33 RT sdl.b[372] LET plotwrch(ch)BE..
point G:64 DEF libhdr.h[90] point=64
pollingch M:-3 DEF libhdr.h[228] pollingch=-3
position G:226 DEF astar.b[84] position=
position G:226 FN astar.b[292] LET position(x,y)=..
position G:226 LG astar.b[192] goalcell:=areav!position(100,95)
position G:226 LG astar.b[194] startcell:=areav!position(20,65)
position G:226 LG astar.b[298] areav:=newvec(position(xsize-1,ysize-1))
position G:226 LG astar.b[299] writef("areav' upb=%n*n",position(...,...))
position G:226 LG astar.b[301] position(x,y)
position G:226 LG astar.b[346] areav!position(x,y)
position G:226 LG astar.b[355] areav!position(x,y)
position G:226 LG astar.b[367] areav!position(x,y)
prevdrawn G:473 DEF sdl.h[73] prevdrawn=
prevdrawn G:473 LG sdl.b[119] UNLESS prevdrawn DO ..
prevdrawn G:473 SG sdl.b[104] currx,curry,prevdrawn:=x,y,FALSE
prevdrawn G:473 SG sdl.b[107] currx,curry,currz,prevdrawn:=x,y,z,FALSE
prevdrawn G:473 SG sdl.b[115] currx,curry,prevdrawn:=x,y,FALSE
prevdrawn G:473 SG sdl.b[132] prevdrawn:=FALSE
prevdrawn G:473 SG sdl.b[135] prevdrawn:=TRUE
prevdrawn G:473 SG sdl.b[142] prevdrawn:=FALSE
prevdrawn G:473 SG sdl.b[150] prevdrawn:=TRUE
prevdrawn G:473 SG sdl.b[96] colour,prevdrawn:=col,FALSE
priq G:217 DEF astar.b[70] priq=
priq G:217 LG astar.b[209] IF priq DO ..
priq G:217 LG astar.b[209] freevec(priq)
priq G:217 LG astar.b[408] priq!1
priq G:217 LG astar.b[409] priq!priqn
priq G:217 LG astar.b[423] smallerchild:=priq!q
priq G:217 LG astar.b[424] IF q<priqn&priq!(q+1)<s_f!smallerchild DO ..
priq G:217 LG astar.b[427] smallerchild:=priq!q
priq G:217 LG astar.b[431] priq!p:=smallerchild
priq G:217 LG astar.b[437] priq!p:=cell
priq G:217 LG astar.b[462] priq!q
priq G:217 LG astar.b[466] priq!p:=parent
priq G:217 LG astar.b[471] priq!p:=cell
priq G:217 SG astar.b[125] spacev,priq:=0,0
priq G:217 SG astar.b[152] priq:=getvec(priqupb)
priqn G:218 DEF astar.b[71] priqn=
priqn G:218 LG astar.b[404] priqn=0->0,(VALOF {..})
priqn G:218 LG astar.b[409] priq!priqn
priqn G:218 LG astar.b[413] priqn:=priqn-1
priqn G:218 LG astar.b[421] IF q>priqn DO ..
priqn G:218 LG astar.b[424] IF q<priqn&priq!(q+1)<s_f!smallerchild DO ..
priqn G:218 LG astar.b[446] priqn:=priqn+1
priqn G:218 LG astar.b[447] IF priqn>priqupb DO ..
priqn G:218 LG astar.b[451] demotecell(cell,priqn)
priqn G:218 SG astar.b[153] priqn:=0
priqn G:218 SG astar.b[413] priqn:=priqn-1
priqn G:218 SG astar.b[446] priqn:=priqn+1
priqupb G:219 DEF astar.b[72] priqupb=
priqupb G:219 LG astar.b[152] priq:=getvec(priqupb)
priqupb G:219 LG astar.b[447] IF priqn>priqupb DO ..
priqupb G:219 SG astar.b[151] priqupb:=10000
put G:221 DEF astar.b[76] put=
put_index_record G:74 DEF libhdr.h[100] put_index_record=74
put_record G:72 DEF libhdr.h[98] put_record=72
putword G:33 DEF libhdr.h[59] putword=33
qpkt G:161 DEF libhdr.h[195] qpkt=161
randno G:34 DEF libhdr.h[60] randno=34
randseed G:127 DEF libhdr.h[154] randseed=127
randseed G:204 DEF astar.b[54] randseed=
randseed G:204 LG astar.b[141] writef("delay'stra=%n*n",delaytime,randseed,...)
randseed G:204 SG astar.b[133] randseed:=0
randseed G:204 SG astar.b[136] randseed:=!argv!1
rdargs G:102 DEF libhdr.h[129] rdargs=102
rdargs G:102 LG astar.b[127] UNLESS rdargs("-d/n,'jkstra/s",argv,50) DO ..
rdargs2 G:26 DEF libhdr.h[52] rdargs2=26
rdch G:38 DEF libhdr.h[64] rdch=38
rditem G:103 DEF libhdr.h[130] rditem=103
readn G:83 DEF libhdr.h[109] readn=83
readwords G:44 DEF libhdr.h[70] readwords=44
recordnote G:70 DEF libhdr.h[96] recordnote=70
recordpoint G:69 DEF libhdr.h[95] recordpoint=69
release G:159 DEF libhdr.h[193] release=159
renamefile G:77 DEF libhdr.h[103] renamefile=77
resizescreen G:468 DEF sdl.h[66] resizescreen=
result2 G:10 DEF libhdr.h[36] result2=10
resumeco G:21 DEF libhdr.h[47] resumeco=21
return_hard M:10 DEF libhdr.h[524] return_hard=10
return_hard M:10 MAN libhdr.h[529] cli_initialfaillevel=return_hard
return_ok M:0 DEF libhdr.h[526] return_ok=0
return_severe M:20 DEF libhdr.h[523] return_severe=20
return_soft M:5 DEF libhdr.h[525] return_soft=5
returncode G:11 DEF libhdr.h[37] returncode=11
returnpkt G:169 DEF libhdr.h[200] returnpkt=169
rewindstream G:65 DEF libhdr.h[91] rewindstream=65
rightds G:459 DEF sdl.h[52] rightds=
rightds G:459 LG sdl.b[587] rightds!curry:=currz
rightds G:459 LG sdl.b[621] leftds!y,rightds!y:=maxint,maxint
rightds G:459 LG sdl.b[646] drawto3d(rights!y,y,rightds!y)
rightds G:459 LG sdl.b[649] leftds!y,rightds!y:=maxint,maxint
rightds G:459 LG sdl.b[666] drawto3d(rights!y,y,rightds!y)
rightds G:459 LG sdl.b[669] leftds!y,rightds!y:=maxint,maxint
rightds G:459 LG sdl.b[91] IF rightds DO ..
rightds G:459 LG sdl.b[91] freevec(rightds)
rightds G:459 SG sdl.b[49] leftds,rightds:=0,0
rightds G:459 SG sdl.b[619] rightds:=getvec(currysize-1)
rights G:458 DEF sdl.h[51] rights=
rights G:458 LG sdl.b[469] IF currx>rights!curry DO ..
rights G:458 LG sdl.b[469] rights!curry:=currx
rights G:458 LG sdl.b[494] UNLESS lefts&rights DO ..
rights G:458 LG sdl.b[501] lefts!i,rights!i:=maxint,minint
rights G:458 LG sdl.b[531] rights!y
rights G:458 LG sdl.b[539] lefts!y,rights!y:=maxint,minint
rights G:458 LG sdl.b[556] drawto(rights!y,y)
rights G:458 LG sdl.b[557] lefts!y,rights!y:=maxint,minint
rights G:458 LG sdl.b[584] IF currx>=rights!curry DO ..
rights G:458 LG sdl.b[585] rights!curry:=currx
rights G:458 LG sdl.b[614] lefts!y,rights!y:=maxint,minint
rights G:458 LG sdl.b[646] drawto3d(rights!y,y,rightds!y)
rights G:458 LG sdl.b[648] lefts!y,rights!y:=maxint,minint
rights G:458 LG sdl.b[666] drawto3d(rights!y,y,rightds!y)
rights G:458 LG sdl.b[668] lefts!y,rights!y:=maxint,minint
rights G:458 LG sdl.b[89] IF rights DO ..
rights G:458 LG sdl.b[89] freevec(rights)
rights G:458 SG sdl.b[48] lefts,rights:=0,0
rights G:458 SG sdl.b[493] rights:=getvec(currysize-1)
rights G:458 SG sdl.b[612] rights:=getvec(currysize-1)
rootnode G:9 DEF libhdr.h[35] rootnode=9
rootnodeaddr M:100 DEF libhdr.h[272] rootnodeaddr=100
rtn_abortcode M:27 DEF libhdr.h[308] rtn_abortcode=
rtn_adjclock M:33 DEF libhdr.h[326] rtn_adjclock=
rtn_blib M:19 DEF libhdr.h[297] rtn_blib=
rtn_blklist M:4 DEF libhdr.h[279] rtn_blklist=
rtn_boot M:17 DEF libhdr.h[295] rtn_boot=
rtn_boottrace M:39 DEF libhdr.h[341] rtn_boottrace=
rtn_bptaddr M:9 DEF libhdr.h[286] rtn_bptaddr=
rtn_bptinstr M:10 DEF libhdr.h[287] rtn_bptinstr=
rtn_clkintson M:6 DEF libhdr.h[282] rtn_clkintson=
rtn_clwkq M:12 DEF libhdr.h[290] rtn_clwkq=
rtn_context M:28 DEF libhdr.h[309] rtn_context=
rtn_crntask M:3 DEF libhdr.h[278] rtn_crntask=
rtn_days M:40 DEF libhdr.h[344] rtn_days=
rtn_dbgvars M:11 DEF libhdr.h[288] rtn_dbgvars=
rtn_dcountv M:34 DEF libhdr.h[328] rtn_dcountv=
rtn_devtab M:1 DEF libhdr.h[276] rtn_devtab=
rtn_dumpflag M:25 DEF libhdr.h[305] rtn_dumpflag=
rtn_envlist M:26 DEF libhdr.h[306] rtn_envlist=
rtn_hdrsvar M:37 DEF libhdr.h[337] rtn_hdrsvar=
rtn_idletcb M:32 DEF libhdr.h[325] rtn_idletcb=
rtn_info M:15 DEF libhdr.h[293] rtn_info=
rtn_insadebug M:8 DEF libhdr.h[284] rtn_insadebug=
rtn_intflag M:24 DEF libhdr.h[304] rtn_intflag=
rtn_keyboard M:20 DEF libhdr.h[298] rtn_keyboard=
rtn_klib M:18 DEF libhdr.h[296] rtn_klib=
rtn_lastch M:7 DEF libhdr.h[283] rtn_lastch=
rtn_lastg M:30 DEF libhdr.h[318] rtn_lastg=
rtn_lastp M:29 DEF libhdr.h[317] rtn_lastp=
rtn_lastst M:31 DEF libhdr.h[319] rtn_lastst=
rtn_mc0 M:43 DEF libhdr.h[349] rtn_mc0=
rtn_mc1 M:44 DEF libhdr.h[351] rtn_mc1=
rtn_mc2 M:45 DEF libhdr.h[352] rtn_mc2=
rtn_mc3 M:46 DEF libhdr.h[353] rtn_mc3=
rtn_membase M:13 DEF libhdr.h[291] rtn_membase=
rtn_memsize M:14 DEF libhdr.h[292] rtn_memsize=
rtn_mins M:41 DEF libhdr.h[346] rtn_mins=rtn_msecs
rtn_msecs M:41 DEF libhdr.h[345] rtn_msecs=
rtn_msecs M:41 MAN libhdr.h[346] rtn_mins=rtn_msecs
rtn_pathvar M:36 DEF libhdr.h[335] rtn_pathvar=
rtn_rootvar M:35 DEF libhdr.h[333] rtn_rootvar=
rtn_screen M:21 DEF libhdr.h[299] rtn_screen=
rtn_scriptsvar M:38 DEF libhdr.h[339] rtn_scriptsvar=
rtn_sys M:16 DEF libhdr.h[294] rtn_sys=
rtn_system M:47 DEF libhdr.h[355] rtn_system=
rtn_tallyv M:5 DEF libhdr.h[280] rtn_tallyv=
rtn_tasktab M:0 DEF libhdr.h[275] rtn_tasktab=0
rtn_tcblist M:2 DEF libhdr.h[277] rtn_tcblist=
rtn_ticks M:42 DEF libhdr.h[347] rtn_ticks=
rtn_upb M:60 DEF libhdr.h[357] rtn_upb=60
rtn_vecstatsv M:22 DEF libhdr.h[301] rtn_vecstatsv=
rtn_vecstatsvupb M:23 DEF libhdr.h[302] rtn_vecstatsvupb=
s_f M:4 DEF astar.b[43] s_f=
s_f M:4 MAN astar.b[218] s_f!fromcell:=s_g+heuristic(fromcell,goalcell)
s_f M:4 MAN astar.b[247] s_f!cell:=tg+heuristic(cell,tocell)
s_f M:4 MAN astar.b[256] s_f!cell:=tg+heuristic(cell,tocell)
s_f M:4 MAN astar.b[285] s_f!cell:=maxint
s_f M:4 MAN astar.b[410] s_f!cell
s_f M:4 MAN astar.b[424] IF q<priqn&priq!(q+1)<s_f!smallerchild DO ..
s_f M:4 MAN astar.b[457] s_f!cell
s_f M:4 MAN astar.b[465] IF s_f!parent<=f DO ..
s_frompos M:2 DEF astar.b[41] s_frompos=
s_frompos M:2 MAN astar.b[217] s_frompos!fromcell:=-1
s_frompos M:2 MAN astar.b[283] s_frompos!cell:=-1
s_g M:3 DEF astar.b[42] s_g=
s_g M:3 MAN astar.b[216] s_g!fromcell:=0
s_g M:3 MAN astar.b[218] s_f!fromcell:=s_g+heuristic(fromcell,goalcell)
s_g M:3 MAN astar.b[227] s_g!currentcell
s_g M:3 MAN astar.b[246] s_g!cell:=tg
s_g M:3 MAN astar.b[254] IF s_state=Open&tg>=s_g!cell DO ..
s_g M:3 MAN astar.b[255] s_g!cell:=tg
s_g M:3 MAN astar.b[284] s_g!cell:=-1
s_pos M:1 DEF astar.b[40] s_pos=
s_pos M:1 MAN astar.b[226] s_pos!currentcell
s_pos M:1 MAN astar.b[282] s_pos!cell:=0
s_pos M:1 MAN astar.b[303] s_pos!cell:=pos
s_priqpos M:5 DEF astar.b[44] s_priqpos=
s_priqpos M:5 MAN astar.b[286] s_priqpos!cell:=0
s_priqpos M:5 MAN astar.b[432] s_priqpos!smallerchild:=p
s_priqpos M:5 MAN astar.b[438] s_priqpos!cell:=p
s_priqpos M:5 MAN astar.b[467] s_priqpos!parent:=p
s_priqpos M:5 MAN astar.b[472] s_priqpos!cell:=p
s_size M:6 DEF astar.b[45] s_size=
s_size M:6 MAN astar.b[46] s_upb=s_size-1
s_state M:0 DEF astar.b[39] s_state=0
s_state M:0 MAN astar.b[233] IF s_state!cell=Blank|s_state!cell=Open DO ..
s_state M:0 MAN astar.b[236] SWITCHON s_state!cell INTO..
s_state M:0 MAN astar.b[245] s_state!cell:=Open
s_state M:0 MAN astar.b[254] IF s_state=Open&tg>=s_g!cell DO ..
s_state M:0 MAN astar.b[281] s_state!cell:=Blank
s_state M:0 MAN astar.b[350] s_state!cell:=Wall
s_state M:0 MAN astar.b[359] s_state!cell:=Wall
s_state M:0 MAN astar.b[396] SWITCHON s_state!cell INTO..
s_upb M:5 DEF astar.b[46] s_upb=s_size-1
s_upb M:5 MAN astar.b[280] newvec(s_upb)
sardch G:36 DEF libhdr.h[62] sardch=36
saveregs M:31 DEF libhdr.h[432] saveregs=31
sawrch G:37 DEF libhdr.h[63] sawrch=37
sawritef G:95 DEF libhdr.h[122] sawritef=95
sawritef G:95 LG astar.b[199] sawritef("scree'size=%n*n",screenxsize,screenysize)
sawritef G:95 LG astar.b[200] sawritef("Calli'tarea()*n")
sawritef G:95 LG sdl.b[495] sawritef("Unabl'ize=%i3*n",currysize)
scb_blength M:14 DEF libhdr.h[463] scb_blength=
scb_block M:9 DEF libhdr.h[458] scb_block=
scb_buf M:3 DEF libhdr.h[452] scb_buf=
scb_bufend M:11 DEF libhdr.h[460] scb_bufend=
scb_encoding M:19 DEF libhdr.h[473] scb_encoding=
scb_end M:5 DEF libhdr.h[454] scb_end=
scb_endfn M:8 DEF libhdr.h[457] scb_endfn=
scb_fd M:16 DEF libhdr.h[465] scb_fd=
scb_id M:0 DEF libhdr.h[449] scb_id=0
scb_lblock M:12 DEF libhdr.h[461] scb_lblock=
scb_ldata M:13 DEF libhdr.h[462] scb_ldata=
scb_maxnamelen M:31 DEF libhdr.h[447] scb_maxnamelen=31
scb_maxnamelen M:31 MAN libhdr.h[477] scb_nameeend=scb_name+scb_maxnamelen/bytesperword
scb_name M:20 DEF libhdr.h[475] scb_name=
scb_name M:20 MAN libhdr.h[477] scb_nameeend=scb_name+scb_maxnamelen/bytesperword
scb_nameeend M:27 DEF libhdr.h[477] scb_nameeend=scb_name+scb_maxnamelen/bytesperword
scb_pos M:4 DEF libhdr.h[453] scb_pos=
scb_rdfn M:6 DEF libhdr.h[455] scb_rdfn=
scb_reclen M:15 DEF libhdr.h[464] scb_reclen=
scb_size M:28 DEF libhdr.h[480] scb_size=
scb_size M:28 MAN libhdr.h[481] scb_upb=scb_size-1
scb_task M:2 DEF libhdr.h[451] scb_task=
scb_timeout M:17 DEF libhdr.h[466] scb_timeout=
scb_timeoutact M:18 DEF libhdr.h[469] scb_timeoutact=
scb_type M:1 DEF libhdr.h[450] scb_type=
scb_upb M:27 DEF libhdr.h[481] scb_upb=scb_size-1
scb_wrfn M:7 DEF libhdr.h[456] scb_wrfn=
scb_write M:10 DEF libhdr.h[459] scb_write=
scbt_console M:-1 DEF libhdr.h[443] scbt_console=-1
scbt_file M:1 DEF libhdr.h[441] scbt_file=1
scbt_mbx M:-2 DEF libhdr.h[444] scbt_mbx=-2
scbt_net M:2 DEF libhdr.h[440] scbt_net=2
scbt_ram M:0 DEF libhdr.h[442] scbt_ram=0
scbt_tcp M:-3 DEF libhdr.h[445] scbt_tcp=-3
screen G:454 DEF sdl.h[46] screen=
screen G:454 LG sdl.b[181] sys(Sys_sdl,sdl_flip,screen)
screen G:454 LG sdl.b[65] UNLESS screen DO ..
screen G:454 LG sdl.b[74] sys(Sys_sdl,sdl_getsurfaceinfo,screen,...)
screen G:454 LG sdl.b[80] selectsurface(screen,xsize,ysize)
screen G:454 SG sdl.b[63] screen:=sys(Sys_sdl,sdl_setvideomode,screenxsize,...)
screenxsize G:464 DEF sdl.h[61] screenxsize=
screenxsize G:464 LG astar.b[199] sawritef("scree'size=%n*n",screenxsize,screenysize)
screenxsize G:464 LG astar.b[364] screenxsize/2,screenysize/2
screenxsize G:464 LG astar.b[384] (screenxsize-xsize)/2
screenxsize G:464 LG astar.b[388] (screenxsize-5*xsize)/2
screenxsize G:464 LG sdl.b[63] screen:=sys(Sys_sdl,sdl_setvideomode,screenxsize,...)
screenxsize G:464 SG sdl.b[61] screenxsize,screenysize:=xsize,ysize
screenysize G:465 DEF sdl.h[62] screenysize=
screenysize G:465 LG astar.b[199] sawritef("scree'size=%n*n",screenxsize,screenysize)
screenysize G:465 LG astar.b[364] screenxsize/2,screenysize/2
screenysize G:465 LG astar.b[385] (screenysize-ysize)/2
screenysize G:465 LG astar.b[389] (screenysize-5*ysize)/2
screenysize G:465 LG sdl.b[63] screen:=sys(Sys_sdl,sdl_setvideomode,screenxsize,...)
screenysize G:465 SG sdl.b[61] screenxsize,screenysize:=xsize,ysize
sdl_ANYFORMAT M:#x10000000 DEF sdl.h[288] sdl_ANYFORMAT=#x10000000
sdl_DOUBLEBUF M:#x40000000 DEF sdl.h[290] sdl_DOUBLEBUF=#x40000000
sdl_FULLSCREEN M:#x80000000 DEF sdl.h[291] sdl_FULLSCREEN=#x80000000
sdl_HWPALETTE M:#x20000000 DEF sdl.h[289] sdl_HWPALETTE=#x20000000
sdl_HWSURFACE M:1 DEF sdl.h[286] sdl_HWSURFACE=1
sdl_NOFRAME M:32 DEF sdl.h[295] sdl_NOFRAME=32
sdl_OPENGL M:2 DEF sdl.h[292] sdl_OPENGL=2
sdl_OPENGLBLIT M:10 DEF sdl.h[293] sdl_OPENGLBLIT=10
sdl_RESIZABLE M:16 DEF sdl.h[294] sdl_RESIZABLE=16
sdl_SWSURFACE M:0 DEF sdl.h[285] sdl_SWSURFACE=0
sdl_SWSURFACE M:0 MAN sdl.b[63] screen:=sys(Sys_sdl,sdl_setvideomode,screenxsize,...)
sdl_avail M:0 DEF sdl.h[149] sdl_avail=0
sdl_blitsurface M:11 DEF sdl.h[162] sdl_blitsurface=
sdl_blitsurface M:11 MAN sdl.b[194] sys(Sys_sdl,sdl_blitsurface,src,...)
sdl_blitsurface M:11 MAN sdl.b[201] sys(Sys_sdl,sdl_blitsurface,src,...)
sdl_delay M:16 DEF sdl.h[167] sdl_delay=
sdl_delay M:16 MAN sdl.b[169] sys(Sys_sdl,sdl_delay,msecs)
sdl_displayformat M:18 DEF sdl.h[169] sdl_displayformat=
sdl_drawcircle M:30 DEF sdl.h[184] sdl_drawcircle=
sdl_drawellipse M:33 DEF sdl.h[187] sdl_drawellipse=
sdl_drawfillcircle M:37 DEF sdl.h[191] sdl_drawfillcircle=
sdl_drawfillcircle M:37 MAN sdl.b[875] sys(Sys_sdl,sdl_drawfillcircle,currsurf,...)
sdl_drawfillellipse M:34 DEF sdl.h[188] sdl_drawfillellipse=
sdl_drawfillrect M:38 DEF sdl.h[192] sdl_drawfillrect=
sdl_drawfillround M:36 DEF sdl.h[190] sdl_drawfillround=
sdl_drawhline M:28 DEF sdl.h[182] sdl_drawhline=
sdl_drawline M:27 DEF sdl.h[181] sdl_drawline=
sdl_drawpixel M:32 DEF sdl.h[186] sdl_drawpixel=
sdl_drawrect M:31 DEF sdl.h[185] sdl_drawrect=
sdl_drawround M:35 DEF sdl.h[189] sdl_drawround=
sdl_drawvline M:29 DEF sdl.h[183] sdl_drawvline=
sdl_enable M:1 DEF sdl.h[260] sdl_enable=1
sdl_fillrect M:39 DEF sdl.h[194] sdl_fillrect=
sdl_fillrect M:39 MAN sdl.b[134] sys(Sys_sdl,sdl_fillrect,currsurf,...)
sdl_fillrect M:39 MAN sdl.b[149] sys(Sys_sdl,sdl_fillrect,currsurf,...)
sdl_fillrect M:39 MAN sdl.b[697] sys(Sys_sdl,sdl_fillrect,currsurf,...)
sdl_fillsurf M:40 DEF sdl.h[195] sdl_fillsurf=
sdl_fillsurf M:40 MAN sdl.b[205] sys(Sys_sdl,sdl_fillsurf,currsurf,col)
sdl_flip M:17 DEF sdl.h[168] sdl_flip=
sdl_flip M:17 MAN sdl.b[181] sys(Sys_sdl,sdl_flip,screen)
sdl_freesurface M:13 DEF sdl.h[164] sdl_freesurface=
sdl_freesurface M:13 MAN sdl.b[188] sys(Sys_sdl,sdl_freesurface,surf)
sdl_freewav M:23 DEF sdl.h[176] sdl_freewav=
sdl_geterror M:8 DEF sdl.h[159] sdl_geterror=
sdl_geterror M:8 MAN sdl.b[38] sys(Sys_sdl,sdl_geterror,mes)
sdl_geterror M:8 MAN sdl.b[66] sys(Sys_sdl,sdl_geterror,mes)
sdl_getfmtinfo M:7 DEF sdl.h[156] sdl_getfmtinfo=
sdl_getmousestate M:21 DEF sdl.h[174] sdl_getmousestate=
sdl_getsurfaceinfo M:6 DEF sdl.h[155] sdl_getsurfaceinfo=
sdl_getsurfaceinfo M:6 MAN sdl.b[74] sys(Sys_sdl,sdl_getsurfaceinfo,screen,...)
sdl_getticks M:50 DEF sdl.h[209] sdl_getticks=
sdl_getticks M:50 MAN sdl.b[172] sys(Sys_sdl,sdl_getticks)
sdl_hidecursor M:52 DEF sdl.h[212] sdl_hidecursor=
sdl_hidecursor M:52 MAN sdl.b[176] sys(Sys_sdl,sdl_hidecursor)
sdl_ignore M:0 DEF sdl.h[259] sdl_ignore=0
sdl_imgload M:15 DEF sdl.h[166] sdl_imgload=
sdl_init M:1 DEF sdl.h[150] sdl_init=
sdl_init M:1 MAN sdl.b[37] IF sys(Sys_sdl,sdl_init,sdl_init_everything) DO ..
sdl_init_everything M:65535 DEF sdl.h[283] sdl_init_everything=65535
sdl_init_everything M:65535 MAN sdl.b[37] IF sys(Sys_sdl,sdl_init,sdl_init_everything) DO ..
sdl_joystickclose M:43 DEF sdl.h[200] sdl_joystickclose=
sdl_joystickeventstate M:49 DEF sdl.h[208] sdl_joystickeventstate=
sdl_joystickgetaxis M:56 DEF sdl.h[217] sdl_joystickgetaxis=
sdl_joystickgetball M:57 DEF sdl.h[218] sdl_joystickgetball=
sdl_joystickgetbutton M:55 DEF sdl.h[216] sdl_joystickgetbutton=
sdl_joystickgethat M:58 DEF sdl.h[219] sdl_joystickgethat=
sdl_joystickname M:44 DEF sdl.h[201] sdl_joystickname=
sdl_joysticknumaxes M:45 DEF sdl.h[202] sdl_joysticknumaxes=
sdl_joysticknumballs M:47 DEF sdl.h[204] sdl_joysticknumballs=
sdl_joysticknumbuttons M:46 DEF sdl.h[203] sdl_joysticknumbuttons=
sdl_joysticknumhats M:48 DEF sdl.h[205] sdl_joysticknumhats=
sdl_joystickopen M:42 DEF sdl.h[199] sdl_joystickopen=
sdl_joystickopen M:42 MAN sdl.b[44] joystick:=sys(Sys_sdl,sdl_joystickopen,0)
sdl_loadbmp M:10 DEF sdl.h[161] sdl_loadbmp=
sdl_loadwav M:22 DEF sdl.h[175] sdl_loadwav=
sdl_locksurface M:4 DEF sdl.h[153] sdl_locksurface=
sdl_maprgb M:26 DEF sdl.h[180] sdl_maprgb=
sdl_maprgb M:26 MAN sdl.b[83] sys(Sys_sdl,sdl_maprgb,format,...)
sdl_mksurface M:53 DEF sdl.h[213] sdl_mksurface=
sdl_mksurface M:53 MAN sdl.b[185] RESULTIS sys(Sys_sdl,sdl_mksurface,format,...)
sdl_numjoysticks M:41 DEF sdl.h[198] sdl_numjoysticks=
sdl_pollevent M:20 DEF sdl.h[172] sdl_pollevent=
sdl_pollevent M:20 MAN sdl.b[165] RESULTIS sys(Sys_sdl,sdl_pollevent,@eventtype)
sdl_quit M:3 DEF sdl.h[152] sdl_quit=
sdl_quit M:3 MAN sdl.b[93] sys(Sys_sdl,sdl_quit)
sdl_setalpha M:14 DEF sdl.h[165] sdl_setalpha=
sdl_setcolourkey M:12 DEF sdl.h[163] sdl_setcolourkey=
sdl_setcolourkey M:54 DEF sdl.h[214] sdl_setcolourkey=
sdl_setcolourkey M:54 MAN sdl.b[98] sys(Sys_sdl,sdl_setcolourkey,surf,col)
sdl_setvideomode M:2 DEF sdl.h[151] sdl_setvideomode=
sdl_setvideomode M:2 MAN sdl.b[63] screen:=sys(Sys_sdl,sdl_setvideomode,screenxsize,...)
sdl_showcursor M:51 DEF sdl.h[211] sdl_showcursor=
sdl_showcursor M:51 MAN sdl.b[178] sys(Sys_sdl,sdl_showcursor)
sdl_unlocksurface M:5 DEF sdl.h[154] sdl_unlocksurface=
sdl_updaterect M:9 DEF sdl.h[160] sdl_updaterect=
sdl_videoinfo M:25 DEF sdl.h[179] sdl_videoinfo=
sdl_waitevent M:19 DEF sdl.h[170] sdl_waitevent=
sdl_wm_setcaption M:24 DEF sdl.h[178] sdl_wm_setcaption=
sdl_wm_setcaption M:24 MAN sdl.b[85] sys(Sys_sdl,sdl_wm_setcaption,title,0)
sdldelay G:521 DEF sdl.h[133] sdldelay=
sdldelay G:521 LG astar.b[204] sdldelay(15000)
sdldelay G:521 RT sdl.b[168] LET sdldelay(msecs)BE..
sdle_active M:1 DEF sdl.h[262] sdle_active=1
sdle_arrowdown M:274 DEF sdl.h[279] sdle_arrowdown=274
sdle_arrowleft M:276 DEF sdl.h[281] sdle_arrowleft=276
sdle_arrowright M:275 DEF sdl.h[280] sdle_arrowright=275
sdle_arrowup M:273 DEF sdl.h[278] sdle_arrowup=273
sdle_joyaxismotion M:7 DEF sdl.h[268] sdle_joyaxismotion=7
sdle_joyballmotion M:8 DEF sdl.h[269] sdle_joyballmotion=8
sdle_joybuttondown M:10 DEF sdl.h[271] sdle_joybuttondown=10
sdle_joybuttonup M:11 DEF sdl.h[272] sdle_joybuttonup=11
sdle_joyhatmotion M:9 DEF sdl.h[270] sdle_joyhatmotion=9
sdle_keydown M:2 DEF sdl.h[263] sdle_keydown=2
sdle_keyup M:3 DEF sdl.h[264] sdle_keyup=3
sdle_mousebuttondown M:5 DEF sdl.h[266] sdle_mousebuttondown=5
sdle_mousebuttonup M:6 DEF sdl.h[267] sdle_mousebuttonup=6
sdle_mousemotion M:4 DEF sdl.h[265] sdle_mousemotion=4
sdle_quit M:12 DEF sdl.h[273] sdle_quit=12
sdle_syswmevent M:13 DEF sdl.h[274] sdle_syswmevent=13
sdle_userevent M:15 DEF sdl.h[276] sdle_userevent=15
sdle_videoresize M:14 DEF sdl.h[275] sdle_videoresize=14
sdlmsecs G:522 DEF sdl.h[134] sdlmsecs=
sdlmsecs G:522 FN sdl.b[172] LET sdlmsecs()=..
sectword M:64991 DEF libhdr.h[244] sectword=64991
selectinput G:56 DEF libhdr.h[82] selectinput=56
selectoutput G:57 DEF libhdr.h[83] selectoutput=57
selectsurface G:485 DEF sdl.h[88] selectsurface=
selectsurface G:485 LG sdl.b[80] selectsurface(screen,xsize,ysize)
selectsurface G:485 RT sdl.b[100] LET selectsurface(surf,xsize,ysize)BE..
sendpkt G:165 DEF libhdr.h[198] sendpkt=165
set_process_name G:175 DEF libhdr.h[206] set_process_name=175
setbit G:112 DEF libhdr.h[139] setbit=112
setbulk G:122 DEF libhdr.h[149] setbulk=122
setcaption G:452 DEF sdl.h[43] setcaption=
setcaption G:452 LG sdl.b[79] setcaption(title)
setcaption G:452 RT sdl.b[85] LET setcaption(title)BE..
setcolour G:469 DEF sdl.h[67] setcolour=
setcolour G:469 LG astar.b[381] setcolour(col)
setcolour G:469 RT sdl.b[96] LET setcolour(col)BE..
setcolourkey G:489 DEF sdl.h[92] setcolourkey=
setcolourkey G:489 RT sdl.b[98] LET setcolourkey(surf,col)BE..
setflags G:156 DEF libhdr.h[190] setflags=156
setlims G:502 DEF sdl.h[108] setlims=
setlims G:502 LG sdl.b[514] setlims(x2,y2)
setlims G:502 LG sdl.b[517] setlims(x3,y3)
setlims G:502 LG sdl.b[518] setlims(x4,y4)
setlims G:502 LG sdl.b[519] setlims(x1,y1)
setlims G:502 LG sdl.b[550] setlims(x2,y2)
setlims G:502 LG sdl.b[551] setlims(x3,y3)
setlims G:502 LG sdl.b[552] setlims(x1,y1)
setlims G:502 RT sdl.b[440] LET setlims(x,y)BE..
setlims3d G:505 DEF sdl.h[111] setlims3d=
setlims3d G:505 LG sdl.b[639] setlims3d(x2,y2,z2)
setlims3d G:505 LG sdl.b[640] setlims3d(x3,y3,z3)
setlims3d G:505 LG sdl.b[641] setlims3d(x4,y4,z4)
setlims3d G:505 LG sdl.b[642] setlims3d(x1,y1,z1)
setlims3d G:505 LG sdl.b[660] setlims3d(x2,y2,z2)
setlims3d G:505 LG sdl.b[661] setlims3d(x3,y3,z3)
setlims3d G:505 LG sdl.b[662] setlims3d(x1,y1,z1)
setlims3d G:505 RT sdl.b[562] LET setlims3d(x,y,z)BE..
setlogname G:117 DEF libhdr.h[144] setlogname=117
setrecordlength G:68 DEF libhdr.h[94] setrecordlength=68
setseed G:35 DEF libhdr.h[61] setseed=35
settimeout G:55 DEF libhdr.h[81] settimeout=55
settimeoutact G:124 DEF libhdr.h[151] settimeoutact=124
showcursor G:524 DEF sdl.h[137] showcursor=
showcursor G:524 FN sdl.b[178] LET showcursor()=..
spacep G:212 DEF astar.b[63] spacep=
spacep G:212 LG astar.b[210] writef("Space't of %n*n",spacet-spacep,spacevupb)
spacep G:212 LG astar.b[269] spacep-upb-1
spacep G:212 SG astar.b[149] spacep:=spacet
spacep G:212 SG astar.b[275] spacep:=p
spacep G:212 SG astar.b[295] spacep:=spacet
spacet G:213 DEF astar.b[64] spacet=
spacet G:213 LG astar.b[149] spacep:=spacet
spacet G:213 LG astar.b[210] writef("Space't of %n*n",spacet-spacep,spacevupb)
spacet G:213 LG astar.b[295] spacep:=spacet
spacet G:213 SG astar.b[148] spacet:=spacev+spacevupb
spacev G:211 DEF astar.b[62] spacev=
spacev G:211 LG astar.b[148] spacet:=spacev+spacevupb
spacev G:211 LG astar.b[208] IF spacev DO ..
spacev G:211 LG astar.b[208] freevec(spacev)
spacev G:211 LG astar.b[270] IF p<spacev DO ..
spacev G:211 SG astar.b[125] spacev,priq:=0,0
spacev G:211 SG astar.b[147] spacev:=getvec(spacevupb)
spacevupb G:210 DEF astar.b[61] spacevupb=
spacevupb G:210 LG astar.b[147] spacev:=getvec(spacevupb)
spacevupb G:210 LG astar.b[148] spacet:=spacev+spacevupb
spacevupb G:210 LG astar.b[210] writef("Space't of %n*n",spacet-spacep,spacevupb)
spacevupb G:210 SG astar.b[146] spacevupb:=#x002DC6C0
splitname G:47 DEF libhdr.h[73] splitname=47
srchwk G:150 DEF libhdr.h[184] srchwk=150
stackfree G:123 DEF libhdr.h[150] stackfree=123
stackword M:#xABCD1234 DEF libhdr.h[242] stackword=#xABCD1234
start G:1 DEF libhdr.h[27] start=1
start G:1 FN astar.b[122] LET start()=..
startcell G:224 DEF astar.b[81] startcell=
startcell G:224 LG astar.b[196] findshortestpath(startcell,goalcell)
startcell G:224 LG astar.b[219] insert(startcell)
startcell G:224 LG astar.b[374] IF cell=startcell DO ..
startcell G:224 SG astar.b[194] startcell:=areav!position(20,65)
startco G:23 DEF libhdr.h[49] startco=23
stdin G:200 DEF astar.b[50] stdin=ug
stdout G:201 DEF astar.b[51] stdout=
stepstream G:67 DEF libhdr.h[93] stepstream=67
stop G:2 DEF libhdr.h[28] stop=2
str2numb G:101 DEF libhdr.h[128] str2numb=101
string_to_dat G:111 DEF libhdr.h[138] string_to_dat=111
string_to_number G:100 DEF libhdr.h[127] string_to_number=100
sys G:3 DEF libhdr.h[29] sys=3
sys G:3 LG sdl.b[134] sys(Sys_sdl,sdl_fillrect,currsurf,...)
sys G:3 LG sdl.b[149] sys(Sys_sdl,sdl_fillrect,currsurf,...)
sys G:3 LG sdl.b[165] RESULTIS sys(Sys_sdl,sdl_pollevent,@eventtype)
sys G:3 LG sdl.b[169] sys(Sys_sdl,sdl_delay,msecs)
sys G:3 LG sdl.b[172] sys(Sys_sdl,sdl_getticks)
sys G:3 LG sdl.b[176] sys(Sys_sdl,sdl_hidecursor)
sys G:3 LG sdl.b[178] sys(Sys_sdl,sdl_showcursor)
sys G:3 LG sdl.b[181] sys(Sys_sdl,sdl_flip,screen)
sys G:3 LG sdl.b[185] RESULTIS sys(Sys_sdl,sdl_mksurface,format,...)
sys G:3 LG sdl.b[188] sys(Sys_sdl,sdl_freesurface,surf)
sys G:3 LG sdl.b[194] sys(Sys_sdl,sdl_blitsurface,src,...)
sys G:3 LG sdl.b[201] sys(Sys_sdl,sdl_blitsurface,src,...)
sys G:3 LG sdl.b[205] sys(Sys_sdl,sdl_fillsurf,currsurf,col)
sys G:3 LG sdl.b[37] IF sys(Sys_sdl,sdl_init,sdl_init_everything) DO ..
sys G:3 LG sdl.b[38] sys(Sys_sdl,sdl_geterror,mes)
sys G:3 LG sdl.b[44] joystick:=sys(Sys_sdl,sdl_joystickopen,0)
sys G:3 LG sdl.b[63] screen:=sys(Sys_sdl,sdl_setvideomode,screenxsize,...)
sys G:3 LG sdl.b[66] sys(Sys_sdl,sdl_geterror,mes)
sys G:3 LG sdl.b[697] sys(Sys_sdl,sdl_fillrect,currsurf,...)
sys G:3 LG sdl.b[74] sys(Sys_sdl,sdl_getsurfaceinfo,screen,...)
sys G:3 LG sdl.b[83] sys(Sys_sdl,sdl_maprgb,format,...)
sys G:3 LG sdl.b[85] sys(Sys_sdl,sdl_wm_setcaption,title,0)
sys G:3 LG sdl.b[875] sys(Sys_sdl,sdl_drawfillcircle,currsurf,...)
sys G:3 LG sdl.b[93] sys(Sys_sdl,sdl_quit)
sys G:3 LG sdl.b[98] sys(Sys_sdl,sdl_setcolourkey,surf,col)
sysabort G:29 DEF libhdr.h[55] sysabort=29
t_bhunk M:3000 DEF libhdr.h[238] t_bhunk=3000
t_bhunk64 M:4000 DEF libhdr.h[239] t_bhunk64=4000
t_end M:1002 DEF libhdr.h[234] t_end=1002
t_end64 M:2002 DEF libhdr.h[237] t_end64=2002
t_hunk M:1000 DEF libhdr.h[232] t_hunk=1000
t_hunk64 M:2000 DEF libhdr.h[235] t_hunk64=2000
t_reloc M:1001 DEF libhdr.h[233] t_reloc=1001
t_reloc64 M:2001 DEF libhdr.h[236] t_reloc64=2001
taskid G:152 DEF libhdr.h[186] taskid=152
taskwait G:160 DEF libhdr.h[194] taskwait=160
tcb G:151 DEF libhdr.h[185] tcb=151
tcb_a M:11 DEF libhdr.h[574] tcb_a=tcb_regs
tcb_active M:10 DEF libhdr.h[571] tcb_active=10
tcb_b M:12 DEF libhdr.h[575] tcb_b=12
tcb_c M:13 DEF libhdr.h[576] tcb_c=13
tcb_count M:18 DEF libhdr.h[581] tcb_count=18
tcb_flags M:5 DEF libhdr.h[566] tcb_flags=5
tcb_g M:15 DEF libhdr.h[578] tcb_g=15
tcb_gbase M:8 DEF libhdr.h[569] tcb_gbase=8
tcb_link M:0 DEF libhdr.h[561] tcb_link=0
tcb_namebase M:19 DEF libhdr.h[583] tcb_namebase=19
tcb_namebase M:19 MAN libhdr.h[585] tcb_upb=tcb_namebase+15/bytesperword+1
tcb_p M:14 DEF libhdr.h[577] tcb_p=14
tcb_pc M:17 DEF libhdr.h[580] tcb_pc=17
tcb_pri M:2 DEF libhdr.h[563] tcb_pri=2
tcb_regs M:11 DEF libhdr.h[573] tcb_regs=11
tcb_regs M:11 MAN libhdr.h[574] tcb_a=tcb_regs
tcb_sbase M:9 DEF libhdr.h[570] tcb_sbase=9
tcb_seglist M:7 DEF libhdr.h[568] tcb_seglist=7
tcb_st M:16 DEF libhdr.h[579] tcb_st=16
tcb_state M:4 DEF libhdr.h[565] tcb_state=4
tcb_stsiz M:6 DEF libhdr.h[567] tcb_stsiz=6
tcb_taskid M:1 DEF libhdr.h[562] tcb_taskid=1
tcb_upb M:23 DEF libhdr.h[585] tcb_upb=tcb_namebase+15/bytesperword+1
tcb_wkq M:3 DEF libhdr.h[564] tcb_wkq=3
testbit G:113 DEF libhdr.h[140] testbit=113
testflags G:157 DEF libhdr.h[191] testflags=157
tg M:190 DEF libhdr.h[216] tg=190
timeoutch M:-2 DEF libhdr.h[227] timeoutch=-2
tracing G:202 DEF astar.b[52] tracing=
tracing G:202 LG astar.b[141] IF tracing DO ..
tracing G:202 SG astar.b[138] tracing:=argv!3
ug M:200 DEF libhdr.h[217] ug=200
ug M:200 MAN astar.b[50] stdin=ug
unhold G:159 DEF libhdr.h[193] unhold=159
unloadseg G:106 DEF libhdr.h[133] unloadseg=106
unpackstring G:31 DEF libhdr.h[57] unpackstring=31
unrdch G:40 DEF libhdr.h[66] unrdch=40
updatescreen G:525 DEF sdl.h[138] updatescreen=
updatescreen G:525 LG astar.b[203] updatescreen()
updatescreen G:525 RT sdl.b[180] LET updatescreen()BE..
wrch G:41 DEF libhdr.h[67] wrch=41
wrch G:41 LG sdl.b[362] wrch
wrch G:41 SG sdl.b[366] wrch:=plotwrch
wrch G:41 SG sdl.b[368] wrch:=oldwrch
write_ch_slice F:30 LF sdl.b[211] write_ch_slice(currx,...-line,ch,line)
write_ch_slice F:30 RT sdl.b[215] LET write_ch_slice(x,y,ch,line)BE..
writed G:85 DEF libhdr.h[111] writed=85
writef G:94 DEF libhdr.h[121] writef=94
writef G:94 LG astar.b[128] writef("Bad a'r astar*n")
writef G:94 LG astar.b[141] writef("delay'stra=%n*n",delaytime,randseed,...)
writef G:94 LG astar.b[210] writef("Space't of %n*n",spacet-spacep,spacevupb)
writef G:94 LG astar.b[237] writef("System error*n")
writef G:94 LG astar.b[271] writef("More ' needed*n")
writef G:94 LG astar.b[299] writef("areav' upb=%n*n",position(...,...))
writef G:94 LG astar.b[448] writef("Need 'y queue*n")
writef G:94 LG sdl.b[367] writef(form,a,b,...)
writef G:94 LG sdl.b[39] writef("Unabl'SDL: %s*n",mes)
writef G:94 LG sdl.b[67] writef("Unabl'ode: %s*n",mes)
writef G:94 LG sdl.b[930] writef("*ngetm'ailable*n")
writehex G:87 DEF libhdr.h[113] writehex=87
writen G:86 DEF libhdr.h[112] writen=86
writeoct G:88 DEF libhdr.h[114] writeoct=88
writes G:89 DEF libhdr.h[115] writes=89
writet G:90 DEF libhdr.h[116] writet=90
writeu G:91 DEF libhdr.h[117] writeu=91
writewords G:45 DEF libhdr.h[71] writewords=45
writez G:92 DEF libhdr.h[118] writez=92
xsize G:215 DEF astar.b[67] xsize=
xsize G:215 LG astar.b[230] pos+dy*xsize+dx
xsize G:215 LG astar.b[292] y*xsize+x
xsize G:215 LG astar.b[298] areav:=newvec(position(xsize-1,ysize-1))
xsize G:215 LG astar.b[299] writef("areav' upb=%n*n",position(...,...))
xsize G:215 LG astar.b[300] FOR x=0 TO xsize-1 DO..
xsize G:215 LG astar.b[366] FOR x=0 TO xsize-1 DO..
xsize G:215 LG astar.b[384] (screenxsize-xsize)/2
xsize G:215 LG astar.b[388] (screenxsize-5*xsize)/2
xsize G:215 SG astar.b[296] xsize,ysize:=128,128
xsize G:215 SG astar.b[297] xsize,ysize:=128*5,128*5
ysize G:216 DEF astar.b[68] ysize=
ysize G:216 LG astar.b[298] areav:=newvec(position(xsize-1,ysize-1))
ysize G:216 LG astar.b[300] FOR y=0 TO ysize-1 DO..
ysize G:216 LG astar.b[366] FOR y=0 TO ysize-1 DO..
ysize G:216 LG astar.b[385] (screenysize-ysize)/2
ysize G:216 LG astar.b[389] (screenysize-5*ysize)/2
ysize G:216 SG astar.b[296] xsize,ysize:=128,128
ysize G:216 SG astar.b[297] xsize,ysize:=128*5,128*5
